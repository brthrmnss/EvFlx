<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
					   creationComplete="onInit(event)"
					  >

	<fx:Metadata>
		[Event(name="selectionChanged", type=" org.syncon.evernote.basic.model.CustomEvent")]		
	</fx:Metadata>		
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import spark.components.List;
			import spark.components.supportClasses.ListBase;
			import spark.events.IndexChangeEvent;
			
			static public var SELECTION_CHANGED :String = 'selectionChanged'
			import org.syncon.evernote.basic.model.CustomEvent;
/* 			override public function set height ( n : Number )  : void
			{
				super.height = n 
				this.list.height = n -10
			}
			override public function set width ( n : Number )  : void
			{
				super.width = n 
				this.list.width = n -10
			}	 */		

			[SkinPart(required="true")]
			public var list:Object;	//listbase not gooe neough 
			protected function list_itemClickHandler2(event:IndexChangeEvent):void
			{
				if ( event.newIndex == this.skipIndex ) 
				{
					this.skipIndex = -1
					return
				}
				if ( this.list.selectedItems.length > 1 ) 
				{
					this.dispatchEvent( new CustomEvent( 'multipleItemsSelected' , this.list.selectedItems) ) 
				}
				this.dispatchEvent( new CustomEvent( 'clickedNote' , this._notes.getItemAt( event.newIndex ) 
							) ) 
				
				this.list.selectedItems  = this.selectedItemsVector()
			}
			protected function list_itemClickHandler(event:ListEvent):void
			{
				if ( event.rowIndex == this.skipIndex ) 
				{
					this.skipIndex = -1
						return
				}
				if ( event.itemRenderer is NoteListTagItemRenderer )
					return; 
				// TODO Auto-generated method stub
				if ( this.list.selectedItems.length > 1 ) 
				{
					this.dispatchEvent( new CustomEvent( 'multipleItemsSelected' , this.list.selectedItems) ) 
				}
				this.dispatchEvent( new CustomEvent( 'clickedNote' ,event.itemRenderer.data) ) 
					
				this.list.selectedItems = this.selectedItems.toArray()
			}

 
			
			override protected function partAdded(partName:String, instance:Object):void
			{
				super.partAdded(partName, instance);
				if( instance == list)
				{
					this.list.addEventListener( 'checkbox_'+'true', this.onSelectedItemsChanged ) 
					this.list.addEventListener( 'checkbox_'+'false', this.onSelectedItemsChanged )
					if ( list is List ) 
					{
						this.list.addEventListener( IndexChangeEvent.CHANGE, this.list_itemClickHandler2 )		
					}
					else
					{
						this.list.addEventListener( ListEvent.ITEM_CLICK, this.list_itemClickHandler )		
					}
					this.list.dataProvider = _notes; 
				}
			
			}			
			
			override protected function partRemoved(partName:String, instance:Object):void
			{
				super.partRemoved(partName, instance);
				
				if (instance == list)
				{
					this.list.removeEventListener( 'checkbox_'+'true', this.onSelectedItemsChanged ) 
					this.list.removeEventListener( 'checkbox_'+'false', this.onSelectedItemsChanged )
					if ( list is List ) 
					{
						this.list.removeEventListener( IndexChangeEvent.CHANGE, this.list_itemClickHandler2 )		
							
					}
					else
					{
						this.list.removeEventListener( ListEvent.ITEM_CLICK, this.list_itemClickHandler )		
					}
					
						
					this.list.dataProvider = null; 
				}
			}
			
			protected function onInit(event:FlexEvent):void
			{
				/* this.list.addEventListener( 'checkbox_'+'true', this.onSelectedItemsChanged ) 
				this.list.addEventListener( 'checkbox_'+'false', this.onSelectedItemsChanged ) */
			}
			
			/**
			 * Keep a seperate list of selected items
			 * */
			public var selectedItems :  ArrayList = new  ArrayList();
			private function selectedItemsVector()  : Vector.<Object>
			{
				var vec : Vector.<Object> = new Vector.<Object>()
				for each( var i : Object in selectedItems ) {
					vec.push(i);
				}
				return vec
			}
			/**
			 * When checkbox clicked, it create a selection event, 
			 * selection event handler will ignore this index, then reset
			 * skipIndex back to -1
			 * */
			private var skipIndex : int =-1
			private function onSelectedItemsChanged(e:CustomEvent):void
			{
				var note : Object = this.list.dataProvider.getItemAt( int( e.data ) ) 
				if ( 'checkbox_'+'true' == e.type ) 
				{
					if ( this.selectedItems.getItemIndex( note ) ==-1 ) 
						this.selectedItems.addItem( note ) 
				}
				else
				{
					this.selectedItems.removeItem( note ) 					
				}
				if ( this.list is  List ) 
				{
					
					
					this.list.selectedItems = this.selectedItemsVector
				}
				else //mx component 
				{
					this.list.selectedItems = this.selectedItems.toArray()
				}
				this.dispatchEvent( new CustomEvent( 'selectionChanged', this.selectedItems.toArray() ) ) 
				this.skipIndex = int(e.data)
			}

			private var _notes : ArrayCollection = new ArrayCollection()
			public function set notes ( notes :  ArrayCollection )  : void
			{
				this._notes = notes; 
				this.list.dataProvider = notes
			}			
			
		]]>
	</fx:Script>

	<!--
	<s:Rect width="100%" height="100%" radiusX="3" radiusY="3" >
		<s:fill>
			<s:SolidColor color="#8CB3D5" />
		</s:fill>
	</s:Rect>
	-->

	
</s:SkinnableContainer>
