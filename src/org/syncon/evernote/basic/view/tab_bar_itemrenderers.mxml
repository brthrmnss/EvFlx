<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"  
				autoDrawBackground="false"   click="itemrenderer1_clickHandler(event)"
				addedEffect="{addEffect}" alpha="0"
			 
				  buttonMode="true" useHandCursor="true" xmlns:view="org.syncon.evernote.basic.view.*"
				>
	
	
	<fx:Declarations>
		<s:Fade id="addEffect" duration="300" alphaFrom="0" alphaTo="1" />
		<s:Fade id="addEffect2" duration="300" alphaFrom="1" alphaTo="0" />
	</fx:Declarations>   	
		
	<fx:Script> 
		<![CDATA[ 
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.basic.vo.MenuVO;
			import org.syncon.evernote.model.Note2;
			[Bindable] private var first : Boolean = false;
			[Bindable] private var middle : Boolean = false;
			[Bindable] private var last : Boolean = false		;
			[Bindable] public var note :  Note2 = new Note2();
				
			[Bindable] private var labelText :  String= ''; 
			[Bindable] private var labelTooltip : String = '';
			[Bindable] private var colorR : uint = 0x121212
			override public function set data(value:Object):void { 
				
				if ( this.note != null ) 
				{
					this.note.removeEventListener(Note2.NOTE_SELECTION_CHANGED, this.onUpdate ) 
					this.note.removeEventListener(Note2.NOTE_UPDATED, this.onUpdate ) 							
				}
				super.data = value; 
				// Check to see if the data property is null. 
				if (value== null) 
					return; 
				// If the data property is not null,
				note = value as Note2
				// set the Label controls appropriately. 
				this.labelText  = note.title.toString(); 
				this.onUpdate(null)
				//this.labelTooltip= note.name.toString(); 	
			 
				//.firstName + ', ' + value.lastName;
				//compLabel.text = value.companyID;
				this.note.addEventListener(Note2.NOTE_SELECTION_CHANGED, this.onUpdate ) 
				this.note.addEventListener(Note2.NOTE_UPDATED, this.onUpdate ) 					
			} 
			
			
			public function onUpdate(e:Event):void
			{
				this.labelText  = note.title.toString(); 
				//if ( this.note.titleOrTempTitle() != '' ) 
				this.labelText  = note.titleOrTempTitle();
/* 				if ( this.note.selected ) 
				this.bgColor.color = 0xFFFFFF
				else
				this.bgColor.color = 0xE8E8E8 */
					
				if ( this.note.selected )
				{
					this.transColor.colorTo = 0xFFFFFF
					this.transFade.alphaTo = 1
				}
				else
				{
					this.transColor.colorTo = 0xE8E8E8
					this.transFade.alphaTo = 0.75
				}
				transColor.play()
				this.transFade.play();
			}
 

			protected function btnClose_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent ( 'closeNoteTab', this.note )  ) ; 
			}


			protected function itemrenderer1_clickHandler(event:MouseEvent):void
			{
				if ( event.target == this.btnClose || event.currentTarget == this.btnClose ) 
					return;
				this.dispatchEvent( new CustomEvent ( 'openNote', this.note )  ) ; 
			}

		]]> 
	</fx:Script> 
	
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
	</s:states> 

	
	<s:transitions>
		<s:Transition toState="*" >
			<s:AnimateColor targets="{[this.txtLbl]}"  
							duration="250" />
		</s:Transition>
	</s:transitions>	
	
	<fx:Declarations>
		<s:AnimateColor targets="{[this.bgColor]}"   id="transColor"
						duration="250" />
		<s:Fade targets="{[this]}"   id="transFade" 
						duration="800" />		
	</fx:Declarations>
	
	<s:Rect id="bgStart"  
			topRightRadiusX="5"  topRightRadiusY="5" 	topLeftRadiusX="5"  topLeftRadiusY="5"
			left="0" right="0" top="0" bottom="0" 
				 >
			<s:fill>
				<s:SolidColor id="bgColor" color="#E8E8E8" />
			</s:fill>
		</s:Rect>	

	
	<s:HGroup paddingBottom="7" paddingLeft="10" paddingRight="5" paddingTop="7"
			   verticalAlign="middle" verticalCenter="0"  gap="1"
			  >
		<s:Label id="txtLbl"  text="{this.labelText}"  toolTip="{this.labelTooltip}" 
				   color="{this.colorR}"  color.hovered="#4C9EA8"
				  fontSize="10"   fontWeight="bold"/>
		<!--<s:Label id="txtLbl_Disabled" 
				  includeIn="disabled"   color.hovered="#808080"
				  text="{this.labelText}" color="#808080"    fontSize="10"   fontWeight="bold"/>		-->
		 <view:close_button id="btnClose" click="btnClose_clickHandler(event)" /> 
		<!--<s:Label text="x" click="btnClose_clickHandler(event)" />-->
	</s:HGroup>
	
	
</s:ItemRenderer>
