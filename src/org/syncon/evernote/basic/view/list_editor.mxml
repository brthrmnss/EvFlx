<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"  
					  width="100%" height="100%"  creationComplete="skinnablecontainer1_creationCompleteHandler(event)"
					  xmlns:view="org.syncon.evernote.basic.view.*"
					  xmlns:components="brust.components.*" xmlns:tlf="net.asciiworks.tlf.*">
	<fx:Metadata>
		[Event(name="tagAdded", type="org.syncon.evernote.basic.model.CustomEvent")]		
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import brust.components.SearchInput;
			import brust.components.SearchMode;
			import brust.events.SearchInputEvent;
			
			import com.evernote.edam.type.Note;
			import com.evernote.edam.type.Notebook;
			
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.TextFlow;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import net.asciiworks.tlf.TLFTextEditor;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.model.Note2;
			import org.syncon.evernote.model.Notebook2;
			
			import spark.components.DropDownList;
			import spark.components.TextInput;
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			[SkinPart(required="true")]
			public var txtTitle:TextInput;
			[SkinPart(required="true")]
			public var txtContents:TLFTextEditor;			
			[SkinPart(required="true")]
			public var dropdownNotebook:DropDownList;
			[SkinPart(required="true")]
			public var txtTags:SearchInput;
			[SkinPart(required="true")]
			public var listTags:TagListAdjustable;		
			[SkinPart(required="true")]
			public var controlp:richtext_control_panel;				
			
			[Bindable] public var tags : ArrayCollection = new  ArrayCollection();
			[Bindable] public var selectedTags : ArrayCollection = new  ArrayCollection();
			
			static public var NOTE_NOTEBOOK_CHANGED : String = 'noteNotebookChanged';
			static public var TAG_ADDED : String = 'tagAdded'			
			
			override protected function partAdded(partName:String, instance:Object):void {
				super.partAdded(partName, instance);
				
				if (instance == this.txtTitle) {
					this.txtTitle.addEventListener( TextOperationEvent.CHANGE, this.txtTitle_changeHandler ) 
				}
				if (instance == this.dropdownNotebook) {
					this.dropdownNotebook.addEventListener( IndexChangeEvent.CHANGE,
						this.dropdownNotebook_changeHandler ) 
				}	
				if (instance == this.listTags) {
					this.listTags.addEventListener( TagListAdjustable.TAGS_CHANGED,
						this.listTags_tagsChangedHandler ) 
					this.listTags.tags=this.selectedTags
				}		
				if (instance == this.txtTags) {
					this.txtTags.addEventListener( SearchInputEvent.SELECT,
						this.txtTags_selectHandler ) 
					this.txtTags.dataProvider = this.tags; 
					txtTags.searchMode= SearchMode.INFIX_SEARCH 
				}					
			}
			
			override protected function partRemoved(partName:String, instance:Object):void {
				super.partRemoved(partName, instance);
				
				if (instance == this.txtTitle) {
					this.txtTitle.removeEventListener( TextOperationEvent.CHANGE, this.txtTitle_changeHandler ) 
				}		
				if (instance == this.dropdownNotebook) {
					this.dropdownNotebook.removeEventListener( IndexChangeEvent.CHANGE, 
						this.dropdownNotebook_changeHandler ) 
				}	
				if (instance == this.listTags) {
					this.listTags.removeEventListener( TagListAdjustable.TAGS_CHANGED,
						this.listTags_tagsChangedHandler )
					this.listTags.tags=null;
				}	
				if (instance == this.txtTags) {
					this.txtTags.removeEventListener( SearchInputEvent.SELECT,
						this.txtTags_selectHandler ) 
					this.txtTags.dataProvider = null; 
				}		
			}
				
				
				
			private var _note : Note2 = new Note2()
			public function get note () : Note2 { return this._note } 
			private var dirty : Boolean = false; 
			public function  isDirty() : Boolean
			{
				return this.dirty
			}
			public function set note ( n :  Note2) : void
			{
				if ( this._note != null ) 
				{
					this._note.oldCursor = this.txtContents.display.selectionActivePosition
					this._note.removeEventListener(Note2.NOTE_DIRTY_CHANGED, this.onDirtyChanged ) 
				}
				this._note = n; 
				this._note.addEventListener(Note2.NOTE_DIRTY_CHANGED, this.onDirtyChanged ) 
					
				this.txtTitle.text = this._note.titleOrTempTitle()
				//this.txtContents.display.content  = TextConverter.importToFlow( n.contentOrTempContent(), TextConverter.TEXT_FIELD_HTML_FORMAT )
				//this.txtContents.textFlow  = TextConverter.importToFlow( n.contentOrTempContent(), TextConverter.TEXT_FIELD_HTML_FORMAT )
				var xTags : Array = this.note.tags.toArray()
				//this.selectedTags
				this.listTags.tags = this.note.tags; 
				this.listTags.updateNote=this.note; 
				
				//this.dropdownNotebook.fselectedItem = this._note.notebookGuid; 
				for each ( var notebook_  :  Notebook in this.dropdownNotebook.dataProvider ) 
				{
					if ( notebook_.guid == this.note.notebookGuid ) 
						this.dropdownNotebook.selectedItem = notebook_; 
				}
				if ( this._note.guid == ''|| this._note.guid == null ) 
				{
					this.txtTitle.setFocus()
					this.txtTitle.selectAll()
					//this.callLater( this.txtTitle.selectAll )
				}
				else
				{
					this.txtContents.setFocus()
				}
				this.dirty = false; 
				
			}
			protected function onDirtyChanged(e:Event):void
			{
				this.dirty = e.currentTarget.dirty; 
			}
			protected function dropdownNotebook_changeHandler(event:IndexChangeEvent):void
			{
				var oldNotebook : Notebook2 = this.dropdownNotebook.dataProvider[event.oldIndex] 
				var newNotebook : Notebook2 = this.dropdownNotebook.dataProvider[event.newIndex] 
										
				//this.dirty = false;
				this.note.notebookGuid = this.dropdownNotebook.selectedItem.guid
				this.dispatchEvent( new CustomEvent( NOTE_NOTEBOOK_CHANGED, {note:this.note, oldNb:oldNotebook, newNb:newNotebook}) ) 
				//this.note.notebookGuid = this.dropdownNotebook.selectedItem.guid
			}

			public function updateDropdownSize() : void{
				var maxSize : Number = 0; 
				for each ( var n :  Notebook2  in this.dropdownNotebook.dataProvider )
				{
					if ( maxSize < n.name.length ) 
						maxSize = n.name.length; 
				}
				this.dropdownNotebook.width = maxSize * 8;
			}
			
			public function conversionResult(str:String):void
			{
			/* 	return;
				this.txtContents.display.content  = TextConverter.importToFlow( str, 
					TextConverter.TEXT_LAYOUT_FORMAT )  */
				//str = 	'<TextFlow columnCount="inherit" columnGap="inherit" columnWidth="inherit" lineBreak="inherit" paddingBottom="inherit" paddingLeft="inherit" paddingRight="inherit" paddingTop="inherit" verticalAlign="inherit" whiteSpaceCollapse="preserve" xmlns="http://ns.adobe.com/textLayout/2008"><p lineHeight="180%"><span></span></p></TextFlow>'
				this.txtContents.textFlowMarkup  = str	
					
					this.txtContents.display.selectRange( this._note.oldCursor, this._note.oldCursor ) 
			}
			
			
			public function conversionTFResult(tf: TextFlow):void
			{
				//this.txtContents.textFlow  = new TextFlow	
				//this.txtContents.textFlow  = tf	
				//this.txtContents.textFlow  = new TextFlow	
				this.txtContents.textFlow  = tf			
					if ( this._note.oldCursor == -1 ) 
						this._note.oldCursor = 0; 
				this.txtContents.display.selectRange( this._note.oldCursor, this._note.oldCursor ) 
			}			

			protected function txtTags_selectHandler(event:SearchInputEvent):void
			{
				this.txtTags.text = '';
				if ( this.listTags.tags.getItemIndex( event.item ) != -1 ) 
					return; 
				//this.selectedTags.addItem( event.item ) 
				this.listTags.tags.addItem( event.item )
				this.txtTags.showPopUp()
				
				this.dispatchEvent( new CustomEvent( TAG_ADDED,
					event.item  ) )
					
			}


			protected function txtTitle_changeHandler(event:TextOperationEvent):void
			{
				this.dirty = true; 
				if ( this.note.newNote() ) 
				{
					
				}
				this.note.tempTitle = this.txtTitle.text;
				this.note.noteUpdated()
			}


			protected function txtContents_changeHandler(event:TextOperationEvent):void
			{
				this.dirty = true; 
			}


			protected function skinnablecontainer1_creationCompleteHandler(event:FlexEvent):void
			{
  				this.txtContents.display.addEventListener('change', txtContents_changeHandler )
				this.txtContents.removeElement( this.txtContents.toolbar ) 
				this.controlp.addElement(txtContents.toolbar)
				this.txtContents.display.setStyle( 'paddingTop',  "8");
				this.txtContents.display.setStyle( 'paddingRight',  "5");
				this.txtContents.display.setStyle( 'paddingBottom',  "5");
				this.txtContents.display.setStyle( 'paddingLeft',  "5");		 
			}


			protected function listTags_tagsChangedHandler(event: org.syncon.evernote.basic.model.CustomEvent):void
			{
				//chang etags instantly ...
				//this.dirty = true; 
			}

			/***
			 * Returns temporary copy of note, and new settings
			 * */
			public function getTemp()  : Object
			{/* 
				var args : Object = {}
				this._note.tempTitle = this.editor.txtTitle.text
				args.tf = this.editor.txtContents.textFlow
				this._note.tags = this.editor.listTags.tags;
				var xTags : Array = this.editor.listTags.tags.toArray(); 
				this._note.notebookGuid = this.editor.dropdownNotebook.selectedItem.guid; 
				args.note = this._note; 
				 */
				var args : Object = {}
				this._note.tempTitle = this.txtTitle.text
				args.tf = this.txtContents.textFlow
				this._note.tags = this.listTags.tags;
				var xTags : Array = this.listTags.tags.toArray(); 
				this._note.notebookGuid = this.dropdownNotebook.selectedItem.guid; 
				args.note = this._note; 
				return args; 
			}
		]]>
	</fx:Script>
</s:SkinnableContainer>
