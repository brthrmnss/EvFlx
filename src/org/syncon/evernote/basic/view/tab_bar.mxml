<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark"  creationComplete="onInit()"
					  skinClass="org.syncon.evernote.basic.view.skins.TabBarSkin"		
					
					  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%"  >

	<fx:Metadata>
		[Event(name="selectedNote", type=" org.syncon.evernote.basic.model.CustomEvent")]		
		[Event(name="removeNote", type=" org.syncon.evernote.basic.model.CustomEvent")]			
		[Event(name="clearTabs", type=" org.syncon.evernote.basic.model.CustomEvent")]					
		[Event(name="saveSearch", type=" org.syncon.evernote.basic.model.CustomEvent")]			
		[Event(name="stateChanged", type="flash.events.Event")]							
	</fx:Metadata>	
	<!--
	<s:states>
		<s:State name="disabled" />	
		<s:State name="normalx" />
	</s:states>
	-->
	
	<s:states>
		<s:State name="normal" enterState="invalidateSkinState();changeState(event)" />
		<s:State name="active" enterState="invalidateSkinState();changeState(event);" />
	</s:states>
	
	<fx:Metadata>
		[SkinState("normal")]
		[SkinState("active")]
	</fx:Metadata>	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.model.Note2;
			import org.syncon.evernote.model.Notebook2;
			
			import spark.components.Button;
			import spark.components.DropDownList;
			import spark.components.Label;
			import spark.components.List;
			import spark.events.IndexChangeEvent;
			
			static public var SELECTED_NOTE : String = 'selectedNote';
			static public var REMOVE_NOTE : String = 'removeNote'				;
			static public var CHANGED_ALL_OR_ANY : String = 'changedAllOrAny';
			static public var CLEAR_TABS : String = 'clearTabs';
			static public var SAVE_SEARCH : String = 'saveSearch';			
			static public var NOTE_LIST_ADDED : String = 'noteListAdded'; 
			
			static public var STATE_CHANGED : String = 'stateChanged'; 			
			
			[SkinPart(required="true")]
			public var btnSearch:Button;	
			[SkinPart(required="false")]
			public var btnClear:Button;	
/* 			
			[SkinPart(required="true")]
			public var lblShowing:Label;	
			
			[SkinPart(required="true")]
			public var dropdownNotebooks:DropDownList;				
			
			[SkinPart(required="true")]
			public var lblMatch:Label;		 */
			[SkinPart(required="true")]
			public var listNotes:List;		
		 
			public var selectedNot : Note2
			private function onInit()  : void{
				
				this.addEventListener( 'closeNoteTab', this.onRemoveTag ) ; 
				this.addEventListener( 'openNote', this.onClickNote ) ; 				
				//this.currentState = 'disabled'
				this.clearTabs()
			}
			
			override protected function partAdded(partName:String, instance:Object):void
			{
				super.partAdded(partName, instance);
				if( instance == btnSearch)
				{
					btnSearch.addEventListener(MouseEvent.CLICK,header_clickHandler);
				}
				if( instance == btnClear)
				{
					btnClear.addEventListener(MouseEvent.CLICK,btnClear_clickHandler);
				}
				if( instance == listNotes)
				{
					//listNotes.addEventListener(IndexChangeEvent.CHANGE, this.notebookDropdownChanged ) ;
					this.dispatchEvent( new Event( tab_bar.NOTE_LIST_ADDED ) ) 
				}					
			}			
			protected function btnClear_clickHandler(e:MouseEvent) : void
			{
				this.dispatchEvent( new CustomEvent( tab_bar.CLEAR_TABS) ) 
			}
			protected function header_clickHandler(e:Event)  : void
			{
				this.dispatchEvent( new CustomEvent( search_bar.SAVE_SEARCH ) ) 
			}
			
			private var _notebooks : ArrayCollection = new ArrayCollection()
			/**
			 * Stores original notebooks array for quick retrieval
			 * */
			private var _rawNotebooks : ArrayCollection;			
			public function loadNotebooks ( n :   ArrayCollection )  : void
			{
				//this.dropdownNotebooks.labelField = 'name'; 
				this._rawNotebooks = n
				this._notebooks.source = n.toArray(); 
				var allNotebooksNotebok :  Notebook2 = new Notebook2
				this._notebooks.addItem( allNotebooksNotebok ) 
				allNotebooksNotebok.name = 'All Notebooks'
				allNotebooksNotebok; //notebook count				
				//this.dropdownNotebooks.dataProvider =  this._notebooks; 
			//	this.dropdownNotebooks.selectedIndex = 0;
			}			
			
			 
									
			public function clearTabs()   : void
			{
				this.currentState = ''
				this.invalidateSkinState()
			}
			
			public function allOrAnyListChanged(e:IndexChangeEvent )  : void
			{
				this.dispatchEvent( new CustomEvent( CHANGED_ALL_OR_ANY, e.currentTarget.selectedItem ) )
			}
/* 	
			public function notebookDropdownChanged(e:IndexChangeEvent )  : void
			{
				this.dispatchEvent( new CustomEvent( tab_bar.SELECTED_NOTE, e.currentTarget.selectedItem ) )
			}			
	 */
			/**
			 * CAlled hwen note clicked, do not use index switch functionality b/c 
			 * don't want this to call when clsoe button clicked. 
			 * */
			public function onClickNote(e:CustomEvent )  : void
			{
				this.dispatchEvent( new CustomEvent( tab_bar.SELECTED_NOTE, e.data ) )
			}			
						
			
			private function onRemoveTag(e:CustomEvent):void
			{
				e.stopImmediatePropagation();
				this.dispatchEvent( new CustomEvent(tab_bar.REMOVE_NOTE, e.data )) ; 
				return;
			}
			
			override protected function getCurrentSkinState():String {
				return currentState;
			}			
			
			override protected function measure():void
			{ 
				if (skin)
				{
					measuredWidth = skin.getExplicitOrMeasuredWidth();
					measuredHeight = skin.getExplicitOrMeasuredHeight();
					if ( this.measuredHeight > 40 )
						measuredHeight = skin.getExplicitOrMeasuredHeight()+12;					
					measuredMinWidth = isNaN( skin.explicitWidth ) ? skin.minWidth : skin.explicitWidth;
					measuredMinHeight = isNaN( skin.explicitHeight ) ? skin.minHeight : skin.explicitHeight;
				}				
			}
			
			public function changeState(o:FlexEvent) : void
			{
				this.dispatchEvent( new Event( STATE_CHANGED ) ) 
				//trace('g ' + o.target.name)
				setTimeout( this.dispatchEvent, 300+200,  new Event( STATE_CHANGED ) )
			}
		]]>
	</fx:Script>
	
	
	
	
</s:SkinnableContainer>
