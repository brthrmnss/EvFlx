<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" 
					  width="100%" height="100%"  creationComplete="skinnablecontainer1_creationCompleteHandler(event)"
					  xmlns:view="org.syncon.evernote.basic.view.*"
					  xmlns:components="brust.components.*" xmlns:tlf="net.asciiworks.tlf.*" xmlns:controls="acj.controls.*">
	
	<fx:Script>
		<![CDATA[
			import brust.components.SearchMode;
			import brust.events.SearchInputEvent;
			
			import com.evernote.edam.type.Note;
			import com.evernote.edam.type.Notebook;
			
			import flashx.textLayout.conversion.TextConverter;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.model.Note2;
			import org.syncon.evernote.model.Notebook2;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			[Bindable] public var tags : ArrayCollection = new  ArrayCollection();
			[Bindable] public var selectedTags : ArrayCollection = new  ArrayCollection();
			
			static public var NOTE_NOTEBOOK_CHANGED : String = 'noteNotebookChanged'
			
			private var _note : Note2 = new Note2()
			public function get note () : Note2 { return this._note } 
			private var dirty : Boolean = false; 
			public function  isDirty() : Boolean
			{
				return this.dirty
			}
			public function set note ( n :  Note2) : void
			{
				if ( this._note != null ) 
				{
					this._note.oldCursor = this.txtContents.display.selectionActivePosition
					
				}
				this._note = n; 
				
				this.txtTitle.text = this._note.titleOrTempTitle()
				//this.txtContents.display.content  = TextConverter.importToFlow( n.contentOrTempContent(), TextConverter.TEXT_FIELD_HTML_FORMAT )
				this.txtContents.textFlow  = TextConverter.importToFlow( n.contentOrTempContent(), TextConverter.TEXT_FIELD_HTML_FORMAT )
					
				//this.selectedTags
				this.listTags.tags = this.note.tags; 
					
				//this.dropdownNotebook.fselectedItem = this._note.notebookGuid; 
				for each ( var notebook_  :  Notebook in this.dropdownNotebook.dataProvider ) 
				{
					if ( notebook_.guid == this.note.notebookGuid ) 
						this.dropdownNotebook.selectedItem = notebook_; 
				}
				if ( this._note.guid == ''|| this._note.guid == null ) 
				{
					this.txtTitle.setFocus()
					this.txtTitle.selectAll()
					//this.callLater( this.txtTitle.selectAll )
				}
				else
				{
					this.txtContents.setFocus()
				}
				this.dirty = false; 
			}

			protected function dropdownNotebook_changeHandler(event:IndexChangeEvent):void
			{
				var oldNotebook : Notebook2 = this.dropdownNotebook.dataProvider[event.oldIndex] 
				var newNotebook : Notebook2 = this.dropdownNotebook.dataProvider[event.newIndex] 
										
				//this.dirty = false;
				this.note.notebookGuid = this.dropdownNotebook.selectedItem.guid
				this.dispatchEvent( new CustomEvent( NOTE_NOTEBOOK_CHANGED, {note:this.note, oldNb:oldNotebook, newNb:newNotebook}) ) 
				//this.note.notebookGuid = this.dropdownNotebook.selectedItem.guid
			}

			public function updateDropdownSize() : void{
				var maxSize : Number = 0; 
				for each ( var n :  Notebook2  in this.dropdownNotebook.dataProvider )
				{
					if ( maxSize < n.name.length ) 
						maxSize = n.name.length; 
				}
				this.dropdownNotebook.width = maxSize * 8;
			}
			
			public function conversionResult(str:String):void
			{
			/* 	return;
				this.txtContents.display.content  = TextConverter.importToFlow( str, 
					TextConverter.TEXT_LAYOUT_FORMAT )  */
				//str = 	'<TextFlow columnCount="inherit" columnGap="inherit" columnWidth="inherit" lineBreak="inherit" paddingBottom="inherit" paddingLeft="inherit" paddingRight="inherit" paddingTop="inherit" verticalAlign="inherit" whiteSpaceCollapse="preserve" xmlns="http://ns.adobe.com/textLayout/2008"><p lineHeight="180%"><span></span></p></TextFlow>'
				this.txtContents.textFlowMarkup  = str	
					
					this.txtContents.display.selectRange( this._note.oldCursor, this._note.oldCursor ) 
			}
			

			protected function txtTags_selectHandler(event:SearchInputEvent):void
			{
				this.txtTags.text = '';
				if ( this.listTags.tags.getItemIndex( event.item ) != -1 ) 
					return; 
				//this.selectedTags.addItem( event.item ) 
				this.listTags.tags.addItem( event.item )
				this.txtTags.showPopUp()
					
			}


			protected function txtTitle_changeHandler(event:TextOperationEvent):void
			{
				this.dirty = true; 
				if ( this.note.newNote() ) 
				{
					
				}
				this.note.tempTitle = this.txtTitle.text;
				this.note.noteUpdated()
			}


			protected function txtContents_changeHandler(event:TextOperationEvent):void
			{
				this.dirty = true; 
			}


			protected function skinnablecontainer1_creationCompleteHandler(event:FlexEvent):void
			{
  				//this.txtContents.display.addEventListener('change', txtContents_changeHandler )
				this.txtContents.removeElement( this.txtContents.toolbar ) 
				this.controlp.addElement(txtContents.toolbar)
				//this.txtContents.display.setStyle( 'paddingTop',  "8");
				//this.txtContents.display.setStyle( 'paddingRight',  "5");
				//this.txtContents.display.setStyle( 'paddingBottom',  "5");
				//this.txtContents.display.setStyle( 'paddingLeft',  "5");		 
				this.txtContents.addEventListener('change', txtContents_changeHandler )
			}

		]]>
	</fx:Script>
 
	<view:open_note_in_new_window id="openNoteInNew" right="0" />
	<s:VGroup width="100%" gap="0">
		
		<s:VGroup id="headerBar" width="100%">
				
			
			<s:HGroup verticalAlign="middle">
				<s:Label text="Title:" /> <s:TextInput id="txtTitle" change="txtTitle_changeHandler(event)" /> 
				<s:Label text="Notebook:" /> 
				<s:DropDownList id="dropdownNotebook"  labelField="name" change="dropdownNotebook_changeHandler(event)"/>
				<mx:LinkButton label="Attach File" textDecoration="underline" color="0x36722E" />
			</s:HGroup>
			<s:HGroup  verticalAlign="middle">
				<s:Label text="Tags:" /><!-- <s:TextInput id="txtTags" />-->
				<components:SearchInput
					  select="txtTags_selectHandler(event)"
					searchMode="{SearchMode.INFIX_SEARCH}"
					dataProvider="{this.tags}" labelField="name" promptText="Search"
					skinClass="brust.skins.SearchInputSkin" id="txtTags" />
				<view:TagListAdjustable id="listTags"  
										 liveManiuplation="false"
										tags="{this.selectedTags}" draggable="true" />
			</s:HGroup>		
			<view:richtext_control_panel id="controlp"   />
			
		</s:VGroup>
		<s:Group width="100%">
			<s:Rect width="100%" height="100%"
					bottomLeftRadiusX="8" bottomLeftRadiusY="8"
					bottomRightRadiusX="8" bottomRightRadiusY="8"  >
				<s:stroke>
					<s:SolidColorStroke color="#549BA9" pixelHinting="true" />
				</s:stroke>
			</s:Rect>	
			
			<s:Scroller  id="scrolling"  width="100%"   height="{this.height-this.headerBar.height+10}" >
				<!--
				<s:Group  width="100%" >
					
						<s:RichEditableText id="txtContents"  width="100%"  change="txtContents_changeHandler(event)"
										 minHeight="{this.height-this.headerBar.height+10}"
										 paddingTop="8" paddingRight="5" paddingBottom="5" paddingLeft="5">
					</s:RichEditableText>		
					
				</s:Group>
				-->
				
				
				<s:VGroup  width="100%"    >
					<!--<tlf:TLFTextEditor id="txtContents"  width="100%"    automaticallyExpand="false"
									   height="{this.height-this.headerBar.height+10}"  
									>-->
						<controls:ACJEditor id="txtContents"  width="100%"    automaticallyExpand="false"
											height="{this.height-this.headerBar.height+10}"  
											 />
					<!--
					<s:RichEditableText id="txtContents"  width="100%"  change="txtContents_changeHandler(event)"
					minHeight="{this.height-this.headerBar.height+10}"
					paddingTop="8" paddingRight="5" paddingBottom="5" paddingLeft="5">
					</s:RichEditableText>		
					-->
				</s:VGroup>				
			</s:Scroller>
		
		</s:Group>
	</s:VGroup>
	
	
	
</s:SkinnableContainer>
