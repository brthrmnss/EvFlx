<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark"  creationComplete="onInit()"
					  skinClass="org.syncon.evernote.basic.view.skins.SearchBarSkin"					  
					  xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="40">
	
	
	<fx:Metadata>
		[Event(name="removedTag", type=" org.syncon.evernote.basic.model.CustomEvent")]		
		[Event(name="changedNotebook", type=" org.syncon.evernote.basic.model.CustomEvent")]				
	</fx:Metadata>	
	
	<s:states>
		<s:State name="disabled" />	
		<s:State name="normalx" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.model.Notebook2;
			
			import spark.components.Button;
			import spark.components.DropDownList;
			import spark.components.Label;
			import spark.events.IndexChangeEvent;
			
			static public var CHANGED_NOTEBOOK : String = 'changedNotebook';
			static public var REMOVED_TAG : String = 'removedTag'				;
			static public var CHANGED_ALL_OR_ANY : String = 'changedAllOrAny';
				
			[SkinPart(required="true")]
			public var btnSearch:Button;	
			
			[SkinPart(required="true")]
			public var lblShowing:Label;	
			
			[SkinPart(required="true")]
			public var dropdownNotebooks:DropDownList;				
			
			[SkinPart(required="true")]
			public var lblMatch:Label;		
			[SkinPart(required="true")]
			public var dropdownAllOrAny:DropDownList;		
			[SkinPart(required="true")]
			public var queryList:search_bar_query;					

			private function onInit()  : void{
				this.clearSearch()
				this.addEventListener( 'removeTag', this.onRemoveTag ) ; 
			}
			
			override protected function partAdded(partName:String, instance:Object):void
			{
				super.partAdded(partName, instance);
				if( instance == btnSearch)
				{
					btnSearch.addEventListener(MouseEvent.CLICK,header_clickHandler);
				}
				
				if( instance == dropdownNotebooks)
				{
					dropdownNotebooks.addEventListener(IndexChangeEvent.CHANGE, this.notebookDropdownChanged ) ; 
				}					
				if( instance == dropdownAllOrAny)
				{
					dropdownAllOrAny.addEventListener(IndexChangeEvent.CHANGE, this.allOrAnyListChanged ) ; 
				}				
			}			
			
			protected function header_clickHandler(e:Event)  : void
			{
				
			}
			
			private var _notebooks : ArrayCollection = new ArrayCollection()
			/**
			 * Stores original notebooks array for quick retrieval
			 * */
			private var _rawNotebooks : ArrayCollection;			
			public function loadNotebooks ( n :   ArrayCollection )  : void
			{
				this.dropdownNotebooks.labelField = 'name'; 
				this._rawNotebooks = n
				this._notebooks.source = n.toArray(); 
				var allNotebooksNotebok :  Notebook2 = new Notebook2
				this._notebooks.addItem( allNotebooksNotebok ) 
				allNotebooksNotebok.name = 'All Notebooks'
				allNotebooksNotebok; //notebook count				
				this.dropdownNotebooks.dataProvider =  this._notebooks; 
				this.dropdownNotebooks.selectedIndex = 0;
				
				this.updateDropdownSize()
			}
			
			public function updateDropdownSize() : void{
				var maxSize : Number = 0; 
				for each ( var n :  Notebook2  in this.dropdownNotebooks.dataProvider )
				{
					if ( maxSize < n.name.length ) 
						maxSize = n.name.length; 
				}
				this.dropdownNotebooks.width = maxSize * 8;
			}			
			
			public function selectNotebook(e:Notebook2):void
			{
				//select ALL
				if ( e == null ) 
				{
					this.dropdownNotebooks.selectedIndex = this._rawNotebooks.length
					return; 
				}
				for  ( var i : int =0; i <  this.dropdownNotebooks.dataProvider.length; i++ )
				{
					var n : Notebook2 = this.dropdownNotebooks.dataProvider[i]
					if (n == e ) 
						this.dropdownNotebooks.selectedIndex = i
				}				
			}
			
			public function resultCount( i : int ) : void
			{
				this.lblShowing.text = 'Showing ' + i.toString() + ' notes in ' 
			}
									
			public function clearSearch() : void
			{
				this.queryList.onClear()
				this.currentState = 'disabled'
				this.invalidateSkinState()
			/* 	this.lblMatch.visible = false
				this.dropdownAllOrAny.visible =  false; 
				this.btnSearch.visible = false;  */
			}
			
			public function allOrAnyListChanged(e:IndexChangeEvent )  : void
			{
				this.dispatchEvent( new CustomEvent( CHANGED_ALL_OR_ANY, e.currentTarget.selectedItem ) )
			}
			
			public function notebookDropdownChanged(e:IndexChangeEvent )  : void
			{
				this.dispatchEvent( new CustomEvent( CHANGED_NOTEBOOK, e.currentTarget.selectedItem ) )
			}			
			
			public function updateQueryParts(arr:Array):void
			{
				this.currentState = ''
				this.queryList.tagNamesArray = arr; 
				/* this.btnSearch.visible = true
				this.dropdownAllOrAny.visible = true
				this.lblMatch.visible = true;  */
			}
			private function onRemoveTag(e:CustomEvent):void
			{
				this.dispatchEvent( new CustomEvent(search_bar.REMOVED_TAG, e.data )) ; 
				return;
				
			}
			
		]]>
	</fx:Script>
	
</s:SkinnableContainer>
