<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx" 
					  width="100%"   
					  height="100%"  
					  xmlns:view="org.syncon.evernote.basic.view.*">

 
 
	<s:states>
		<s:State name="normal" enterState="invalidateSkinState()" />
		<s:State name="disabled" enterState="invalidateSkinState()" />
		<s:State name="view" enterState="invalidateSkinState()" />
		<s:State name="edit" enterState="invalidateSkinState()" />	
	</s:states>
	
	<fx:Metadata>
		[SkinState("normal")]
		[SkinState("disabled")]
		[SkinState("view")]
		[SkinState("edit")]		
	</fx:Metadata>	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.model.Notebook2;
			
			import spark.components.Label;
 
			[SkinPart(required="true")]
			public var list:right_side_list_container;	
			
			[SkinPart(required="true")]
			public var edit:right_side_editor_container;	
 
			[SkinPart(required="false")]
			public var view:right_side_view_container;
			
			[SkinPart(required="false")]
			public var lblCtrl:Label;	
			
			[SkinPart(required="false")]
			public var lblShift:Label;
			
			private function onInit()  : void{
				//this.addEventListener( 'removeTag', this.onRemoveTag ) ; 
			}
			
			override protected function partAdded(partName:String, instance:Object):void
			{
				super.partAdded(partName, instance);
			/* 	if( instance == btnSaveSearch)
				{
					btnSaveSearch.toolTip = 'Save Search'; 
					btnSaveSearch.addEventListener(MouseEvent.CLICK,onSaveSearch);
				}
		  */
			}			
 
			private function onRemoveTag(e:CustomEvent):void
			{
				this.dispatchEvent( new CustomEvent(search_bar.REMOVED_TAG, e.data )) ; 
				return;
			}
			
			override protected function getCurrentSkinState():String {
				return currentState;
			}			
			
			override protected function measure():void
			{
				if (skin)
				{
					measuredWidth = skin.getExplicitOrMeasuredWidth();
					measuredHeight = skin.getExplicitOrMeasuredHeight();
					if ( this.measuredHeight > 40 )
						measuredHeight = skin.getExplicitOrMeasuredHeight()+12;					
					measuredMinWidth = isNaN( skin.explicitWidth ) ? skin.minWidth : skin.explicitWidth;
					measuredMinHeight = isNaN( skin.explicitHeight ) ? skin.minHeight : skin.explicitHeight;
				}				
			}
			
			
		]]>
	</fx:Script>
	

 </s:SkinnableContainer>
