<?xml version="1.0" encoding="utf-8"?>
<popup:PopupBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:comps="org.syncon.comps.*" 
					  creationComplete="onInit()" 
					  implements="org.syncon.popups.view.IPopup"
					  xmlns:popup="org.syncon.evernote.basic.view.popup.*" xmlns:editors="org.syncon.evernote.panic.view.popup.editors.*" xmlns:utils="org.syncon.evernote.panic.view.utils.*" xmlns:view="org.syncon.evernote.panic.view.*"					  
					  >

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.core.UIComponent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.controller.WidgetEvent;
			import org.syncon.evernote.panic.vo.PersonVO;
			import org.syncon.evernote.panic.vo.ProjectVO;
			import org.syncon.popups.view.IPopup;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import sss.Shelpers.Shelpers.ui.PopupCode;
			
			public var completeFx : Function; 
			public var person : PersonVO = new PersonVO(); 
			
			override public function onInit() : void 
			{
				this.creationComplete = true; 
				this.popupCode.center()
				this.popupCode.fadeTime = 0.25
			}
			
			override public  function create(app:Object)  : IPopup
			{
				var popup:   PopupPersonHover = new PopupPersonHover()
				popup.popupCode = PopupCode.Create( popup, app ) 
				return popup			
			} 
			
			override public function show(  )  : void
			{
				this.popupCode.open( false,true ) 
			}
 
			public function open( person :  PersonVO , ui : UIComponent  )  : void
			{
				this.popupCode.open( false,  false )
				this.popupCode.moveToComponent( ui, 'tr', false ) 
				this.person = person
				this.txtName.text = this.person.name; 
				//this.txtDesc.text = this.person.desc
				this.chkAvailable.selected = this.person.available
				this.txtStatus.text  = this.person.status; 
				this.txtEmail.text = this.person.email;
				this.txtTwitter.text = this.person.twitter				
			}
 
			override public function hide( ) : void
			{
				this.popupCode.close() 
			}

			public function close( person :  PersonVO , ui : UIComponent  )  : void
			{
				if ( this.person == person ) 
				{
					this.hide()
				}
			}			
			
			protected function btnClose_clickHandler(event:MouseEvent):void
			{
				this.hide()
			}
 

		]]>
	</fx:Script>
<!--
	<editors:PopupBg />
	-->
	<popup:filters>
		<s:DropShadowFilter
			alpha="0.5" angle="45.0" blurX="4.0" blurY="4.0" color="0x000000" 
			distance="4" hideObject="false" inner="false" knockout="false" quality="2" 
			strength="1"/>
	</popup:filters>
	
	<s:Rect width="100%" height="100%"   radiusX="5" radiusY="5">
		<s:fill>
			<s:SolidColor color="0xFFFFFF" alpha="0.8" />
		</s:fill>	
		<s:stroke>
			<s:SolidColorStroke color="0"  pixelHinting="true"  weight="1"/>
		</s:stroke>
	</s:Rect>		
	
	
 <s:VGroup gap="0" 
		    width="110"
		   paddingTop="10" paddingBottom="10" paddingRight="10" paddingLeft="10" >
			 <s:Label id="txtName" />
			 <s:Label id="txtStatus"   />
			 <s:CheckBox id="chkAvailable"   />
			 <s:Label id="txtEmail"   />
			 <s:Label id="txtTwitter"   />
 </s:VGroup>
<!--
		<utils:IconButton  label="X"  iconSkin=".closeBtn" click="btnClose_clickHandler(event)" 
						   right="5" top="10" />-->
</popup:PopupBase>
