<?xml version="1.0" encoding="utf-8"?>
<popup:PopupBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:comps="org.syncon.comps.*" 
					  creationComplete="onInit()" addedToStage="popupbase1_addedToStageHandler(event)"
					  implements="org.syncon.popups.view.IPopup"
					  xmlns:popup="org.syncon.evernote.basic.view.popup.*" xmlns:editors="org.syncon.evernote.panic.view.popup.editors.*" xmlns:utils="org.syncon.evernote.panic.view.utils.*" xmlns:view="org.syncon.evernote.panic.view.*"					  
					  >

	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.controller.WidgetEvent;
			import org.syncon.evernote.panic.view.GraphWidget;
			import org.syncon.evernote.panic.vo.ProjectVO;
			import org.syncon.evernote.panic.vo.WidgetVO;
			import org.syncon.popups.view.IPopup;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import sss.Shelpers.Shelpers.ui.PopupCode;
			
			static public var EDIT_PROJECT : String = 'editProject'; 
			static public var ADD_PROJECT  : String = 'addProject'; 
			static public var OPENED_POPUP : String = 'openedPopup'; 
			static public var SAVE_PROJECT : String = 'saveProject'
				
			public var completeFx : Function; 
			public var project : ProjectVO = new ProjectVO(); 
			
			override public function onInit() : void 
			{
				this.creationComplete = true; 
				this.popupCode.center()
			}
			
			override public  function create(app:Object)  : IPopup
			{
				var popup : PopupEditProject = new PopupEditProject ()
				popup.popupCode = PopupCode.Create( popup, app ) 
				return popup			
			} 
			
			override public function show(  )  : void
			{
				this.popupCode.open( false,true ) 
			}
 
			public function open( proj : ProjectVO, completeFx : Function = null )  : void
			{
				this.popupCode.open( false, true ) 
				this.project = proj
				if ( proj == null )
				{
					this.project = new ProjectVO()
					this.header.label = 'New Project'
				}
				else
					this.header.label = 'Edit Project'
						
				this.completeFx = completeFx
					
				this.txtName.text = this.project.name; 
				this.txtDesc.text = this.project.desc
				this.txtCol3.text = this.project.status
				this.txtCol4.text = this.project.status2
				this.txtPercengate.text = this.project.progress.toString()
				if ( isNaN(this.project.progress) )  
					this.txtPercengate.text= ''					
				this.txtImage.text = this.project.img; 
				this.img.source = this.project.img; 
				this.memberLIst.list1.dataProvider = new ArrayList( this.project.ppl ) 
			}
			
			 /**
			 * Export move data from ui to data object
			 * */
			
			override public function hide( ) : void
			{
				this.popupCode.close() 
			}

			protected function btnClose_clickHandler(event:MouseEvent):void
			{
				this.hide()
			}
 

			protected function btnSave_clickHandler(event:MouseEvent):void
			{
				this.project.name = this.txtName.text 
				this.project.desc = this.txtDesc.text
				this.project.status = this.txtCol3.text  
				this.project.status2 = this.txtCol4.text  
				this.project.progress = Number( this.txtPercengate.text )
				if ( this.txtPercengate.text == '' ) 
					this.project.progress = NaN
				this.project.img = this.txtImage.text  
				this.project.ppl  = this.memberLIst.list1.dataProvider.toArray();
				
				 if ( this.completeFx != null ) this.completeFx( this.project )
					 
				this.project.projectUpdated(['name', 'img'])
					this.hide()
						
					this.dispatchEvent( new CustomEvent( SAVE_PROJECT ) ) 
			}


			protected function btnCancel_clickHandler(event:MouseEvent):void
			{
				this.hide()
			}


			protected function btnEditMembers_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( 'editMembers' ) ) 
				// TODO Auto-generated method stub
			}

			protected function txtImage_changeHandler(event:TextOperationEvent):void
			{
				this.img.source = this.txtImage.text ; 
			}
			protected function changedAvatarHandler(e:CustomEvent):void
			{
				this.txtImage.text = this.img.source; 
			}					
			

			protected function popupbase1_addedToStageHandler(event:Event):void
			{
				trace('added to stage');
			}

		]]>
	</fx:Script>

	 <editors:PopupBg />
	
 <s:VGroup  paddingTop="10" paddingBottom="10" paddingRight="10" paddingLeft="10" >
	 <popup:PopupHeader  bold="false"   label="Edit Project"  id="header" padding="0"  width="100%"/>
	 <mx:Form>
		 <mx:FormItem label="Name" >
			 <s:TextInput id="txtName" width="200" />
		 </mx:FormItem>
		 <mx:FormItem label="Description" >
			 <s:TextInput id="txtDesc" width="200" />
		 </mx:FormItem>
		 <mx:FormItem label="Status:" >
			 <s:TextInput id="txtCol3" width="200" />
		 </mx:FormItem>			 
		 <mx:FormItem label="Status2:" >
			 <s:TextInput id="txtCol4" width="200" />
		 </mx:FormItem>	
		 <mx:FormItem label="Percengate:" >
			 <s:TextInput id="txtPercengate" width="200"
						   toolTip="If set, will draw a progress bar behind the project name"/>
		 </mx:FormItem>	
		 <mx:FormItem label="Image:" >
			 <s:TextInput id="txtImage" 
						   toolTip="Change Project Image to something else"
						  change="txtImage_changeHandler(event)" width="200" />
		 </mx:FormItem>		
		 <mx:FormItem>
			 <utils:AvatarEdit id="img"  emptySetting="" changedAvatar="{changedAvatarHandler(event)}"     />
		 </mx:FormItem>		 
		 <mx:FormItem label="Members:" >
			 <s:HGroup>
				 <view:ProjectMembersList id="memberLIst"  width="180"  clipAndEnableScrolling="true" />
				 <s:Button label="Change" id="btnEditMembers" 
						    toolTip="Change the People involved with this project"
						   click="btnEditMembers_clickHandler(event)" />
			 </s:HGroup>
		 </mx:FormItem>				 
		 <mx:FormItem>
			 <s:HGroup>
				 <s:Button id="btnSave"  label="Save" 
						    toolTip="Save changes"
						   click="btnSave_clickHandler(event)" />
				 <s:Button id="btnCancel" label="Cancel" 
						   toolTip="Leave without saving changes" 
						   click="btnCancel_clickHandler(event)" />
			 </s:HGroup>
		 </mx:FormItem>
	 </mx:Form>

 </s:VGroup>

		<utils:CloseBtn  label="X" click="btnClose_clickHandler(event)" right="0" top="0" />
		<utils:IconButton  label="X"  iconSkin=".closeBtn" click="btnClose_clickHandler(event)" 
						   right="5" top="10" />
</popup:PopupBase>
