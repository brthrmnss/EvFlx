<?xml version="1.0" encoding="utf-8"?>
<popup:PopupBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:comps="org.syncon.comps.*" 
					  creationComplete="onInit()" 
					  implements="org.syncon.popups.view.IPopup"
					  xmlns:popup="org.syncon.evernote.basic.view.popup.*" xmlns:editors="org.syncon.evernote.panic.view.popup.editors.*" xmlns:utils="org.syncon.evernote.panic.view.utils.*" xmlns:view="org.syncon.evernote.panic.view.*"					  
					  >

	
	<popup:states>
		<s:State name="normal" />
		<s:State name="view" />
	</popup:states>	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.controller.WidgetEvent;
			import org.syncon.evernote.panic.vo.PersonVO;
			import org.syncon.evernote.panic.vo.ProjectVO;
			import org.syncon.popups.view.IPopup;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			
			import sss.Shelpers.Shelpers.ui.PopupCode;
			
			static public var SAVE_PERSON : String = 'savePerson'
			
			public var completeFx : Function; 
			public var person : PersonVO = new PersonVO(); 
			
			override public function onInit() : void 
			{
				this.creationComplete = true; 
				this.popupCode.center()
			}
			
			override public  function create(app:Object)  : IPopup
			{
				var popup: PopupEditPerson = new PopupEditPerson()
				popup.popupCode = PopupCode.Create( popup, app ) 
				return popup			
			} 
			
			override public function show(  )  : void
			{
				this.popupCode.open( false,true ) 
			}
 
			public function open( person :  PersonVO, completeFx : Function = null, 
				editMode : Boolean = true )  : void
			{
				this.popupCode.open( false, true ) 
				this.person = person
				if ( person == null )
				{
					this.person = new PersonVO()
					this.header.label = 'New Person'
				}
				else
					this.header.label = 'Edit Person'
						
				this.completeFx = completeFx
					
				this.txtName.text = this.person.name; 
				this.txtNickname.text = this.person.nickname; 
				this.txtDesc.text = this.person.desc
			/* 	this.txtCol3.text = this.person.col2
				this.txtCol4.text = this.person.col3 */
				this.txtImage.text = this.person.src; 
				this.img.source = this.person.src;
				//this.memberLIst.list1.dataProvider = new ArrayList( this.project.ppl ) 
				this.chkAvailable.selected = this.person.available
				this.txtStatus.text  = this.person.status; 
				this.txtEmail.text = this.person.email;
				this.txtTwitter.text = this.person.twitter		
				this.txtNickname.text = this.person.nickname; 	
				this.txtPhone.text = this.person.phone; 		
				
				if ( editMode )
				{
					this.currentState = 'normal' 
					img.editable = true
				}
				else
				{
					this.currentState = 'view' 
					img.editable = false; 
				}
			}
			
			 /**
			 * Export move data from ui to data object
			 * */
			
			override public function hide( ) : void
			{
				this.popupCode.close() 
			}

			protected function btnClose_clickHandler(event:MouseEvent):void
			{
				this.hide()
			}
 

			protected function btnSave_clickHandler(event:MouseEvent):void
			{
				if ( this.txtName.text == '' ) 
				{
					alertTxt.text = 'Name must be set'
					return; 
				}
				this.person.name = this.txtName.text 
				this.person.nickname = this.txtNickname.text 
				this.person.desc = this.txtDesc.text
					
				/* this.person.col2 = this.txtCol3.text  
				this.person.col3 = this.txtCol4.text   */
				this.person.src = this.txtImage.text  
				this.img.source = this.txtImage.text
					
				this.person.status= this.txtStatus.text  
				this.person.available= this.chkAvailable.selected  
				this.person.email = this.txtEmail.text
				this.person.twitter = this.txtTwitter.text
				this.person.phone = this.txtPhone.text 
				
				alertTxt.text = ''
				 if ( this.completeFx != null ) this.completeFx( this.person )
					 
				this.person.update()
				this.hide()
					
				this.dispatchEvent( new CustomEvent( SAVE_PERSON ) ) 
			}


			protected function btnCancel_clickHandler(event:MouseEvent):void
			{
				this.hide()
			}

			protected function txtImage_changeHandler(event:TextOperationEvent):void
			{
				this.img.source = this.txtImage.text ; 
			}
			protected function changePic():void
			{
				this.txtImage.text = this.img.source; 
			}			

			protected function img_changedAvatarHandler(event: CustomEvent):void
			{
				this.changePic();
			}

		]]>
	</fx:Script>

	<editors:PopupBg />
	
 <s:VGroup gap="0"  paddingTop="10" paddingBottom="10" paddingRight="10" paddingLeft="10" >
	 <popup:PopupHeader  bold="false" label.view="View"   label="Edit Project"  id="header" padding="0"  width="100%"/>
	 <s:Label id="alertTxt" />
	 <mx:Form>

		 <mx:FormItem label="Name" required="true" >
			 <s:TextInput id="txtName"   editable.view="false"  />
		 </mx:FormItem>
		 <mx:FormItem label="Nickname" >
			 <s:TextInput id="txtNickname"   editable.view="false"    />
		 </mx:FormItem>		
		 <mx:FormItem>
			 <utils:AvatarEdit id="img"   changedAvatar="img_changedAvatarHandler(event)"/>
		 </mx:FormItem>
		 <mx:FormItem label="Image"  excludeFrom="view">
			 <s:TextInput id="txtImage"
						  toolTip="Change Project Image to something else"
						  change="txtImage_changeHandler(event)"/>
		 </mx:FormItem>		
 
		 
		 <mx:FormItem label="Description" >
			 <s:TextArea  heightInLines="2" id="txtDesc"   editable.view="false"  />
		 </mx:FormItem>
		 
		 <mx:FormItem label="Status" >
			 <s:TextInput id="txtStatus"    editable.view="false"   />
		 </mx:FormItem>	
		 <mx:FormItem label="Available" >
			 <s:CheckBox id="chkAvailable"     enabled.view="false"   />
		 </mx:FormItem>				 
		 <mx:FormItem label="Email" >
			 <s:TextInput id="txtEmail"    editable.view="false"   />
		 </mx:FormItem>		
		 <mx:FormItem label="Twitter" >
			 <s:TextInput id="txtTwitter"   editable.view="false"   />
		 </mx:FormItem>			
		 <mx:FormItem label="Phone" >
			 <s:TextInput id="txtPhone"  editable.view="false"  />
		 </mx:FormItem>				 
		<!-- 
		 <mx:FormItem label="Column 2:" >
			 <s:TextInput id="txtCol4" />
		 </mx:FormItem>	
		 <mx:FormItem label="Column 3:" >
			 <s:TextInput id="txtCol3" />
		 </mx:FormItem>		
		 -->
	
		 <mx:FormItem>
			 <s:HGroup excludeFrom="view">
				 <s:Button id="btnSave"  label="Save" 
						   toolTip="Save changes"
						   click="btnSave_clickHandler(event)" />
				 <s:Button id="btnCancel" label="Cancel" 
						   toolTip="Leave without saving changes" 
						   click="btnCancel_clickHandler(event)" />
			 </s:HGroup>
		 </mx:FormItem>

		 
	 </mx:Form>

 </s:VGroup>

		<utils:IconButton  label="X"  iconSkin=".closeBtn" click="btnClose_clickHandler(event)" 
						   right="5" top="10" />
</popup:PopupBase>
