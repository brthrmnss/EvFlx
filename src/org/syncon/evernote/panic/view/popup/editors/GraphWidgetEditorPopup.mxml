<?xml version="1.0" encoding="utf-8"?>
<popup:PopupBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  xmlns:comps="org.syncon.comps.*" 
					  creationComplete="onInit()" 
					  implements="org.syncon.popups.view.IPopup"
					  xmlns:popup="org.syncon.evernote.basic.view.popup.*" xmlns:editors="org.syncon.evernote.panic.view.popup.editors.*" xmlns:utils="org.syncon.evernote.panic.view.utils.*" xmlns:view="org.syncon.evernote.panic.view.*"					  
					  >

	<fx:Script>
		<![CDATA[
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.controller.WidgetEvent;
			import org.syncon.evernote.panic.view.GraphWidget;
			import org.syncon.evernote.panic.vo.WidgetVO;
			import org.syncon.popups.view.IPopup;
			
			import sss.Shelpers.Shelpers.ui.PopupCode;
			
			public var ui : GraphWidget; 
			
			static public var EDIT_BG : String = 'editBg'; 				
			
			override public function onInit() : void 
			{
				this.creationComplete = true; 
				this.popupCode.center()
			}
 
			
			override public  function create(app:Object)  : IPopup
			{
				var popup :  GraphWidgetEditorPopup = new  GraphWidgetEditorPopup ()
				popup.popupCode = PopupCode.Create( popup, app ) 
				return popup			
			} 
			
			override public function show(  )  : void
			{
				this.popupCode.open( false,true ) 
			}
 
			public function open( a :  WidgetVO  )  : void
			{
				this.popupCode.open( false, false ) 
				this.dispatchEvent( new WidgetEvent( WidgetEvent.EDIT_WIDGET, null,  a ) )
				this.ui = a.ui as GraphWidget; 
			}
			
			override public function hide( ) : void
			{
				this.popupCode.close() 
			}
 
 

			protected function button1_clickHandler(event:MouseEvent):void
			{
				this.hide()
			}


			protected function btnOk_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( WidgetEvent.UPDATE_WIDGET_CONFIG ) ) 
			}
			
			protected function btnTest_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent(  WidgetEvent.TEST_WIDGET ) ) 
			}			

			protected function btnTextValue_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent(  WidgetEvent.TEST_VALUE, 'source' ) ) 
			}

			protected function changed(event: Event):void
			{
				// maybe have a difefenret event as we dont' want to run transitions here 
				this.dispatchEvent( new CustomEvent(  WidgetEvent.TEST_WIDGET ) ) 
				// TODO Auto-generated method stub
			}			
			
			protected function btnEdit_clickHandler (event:String, txt : String):void
			{
				this.dispatchEvent( new CustomEvent(  event, txt ) ) 
			}					
		]]>
	</fx:Script>

	<!--	
	<s:Rect width="100%" height="100%" radiusX="8" radiusY="8">
		<s:fill>
			<s:SolidColor color="0xEDF6F7" />
		</s:fill>	
	</s:Rect>	 	
	
	-->
	
	<s:HGroup>
		
		<s:Group id="popupHolder" >
			<editors:PopupBg />
			
		 <s:VGroup gap="0"  paddingTop="10" paddingBottom="10" paddingRight="10" paddingLeft="10" >
			 <popup:PopupHeader  bold="false"   label="Edit Graph Widget"  padding="0"  width="100%"/>
			 
			 
			<mx:Form>
				<mx:FormItem label="Top Text" >
					<s:TextArea id="txtTop" width="200" 
								heightInLines="3"  change="changed(event)"  />
				</mx:FormItem>
				<mx:FormItem label="Bottom Text" >
					<s:TextArea id="txtBottom" width="200" 
								heightInLines="3"   change="changed(event)"  	/>		
				</mx:FormItem>
				<mx:FormItem label="Value Source"  direction="horizontal">
					<s:TextArea id="txtValue" width="200" 
								heightInLines="3"  change="changed(event)"  />
					<utils:IconButton iconSkin=".btnTest" toolTip="Test Source Result"
									   id="btnTextValue" click="btnTextValue_clickHandler(event)" />
					<utils:HelpButton  toolTip="Help with Graph Source"  type="graph source" />	
				</mx:FormItem>
				
				
				<mx:FormItem label="Background"    direction="horizontal">
					<s:TextArea id="txtBackground" width="200" 
								heightInLines="3" change="changed(event)"  />
					<utils:IconButton iconSkin=".btnTextEditor" toolTip="Edit Source"
									  id="btnTextValue1" click="btnEdit_clickHandler(EDIT_BG, this.txtBackground.text)" />
					<utils:HelpButton  toolTip="Help with Source"  type="sourcing" />			
				</mx:FormItem>	
				
				
				<s:Label text="Simple Bar Graph Only:"  
						 toolTip="the following settings only apply if the 'source' value is a number"/>
				
				<mx:FormItem label="Maximum Value Source" >
					<s:TextInput id="txtMaximum"   toolTip="Maximum value of the graph, useful for multiples" change="changed(event)" />
				</mx:FormItem>	
				
				<mx:FormItem label="Color" >
					<mx:ColorPicker id="colorPicker"   toolTip="Color of the graph" change="changed(event)" />
				</mx:FormItem>		
		
				<editors:WidgetUpdateSettingsControlBox id="timer" width="100%" />
				<mx:FormItem>
					<s:HGroup  width="100%"  horizontalAlign="right">
						<s:Button label="Save" id="btnOk" 
								  toolTip="Accept Changes" 
								  click="btnOk_clickHandler(event)" />
						<s:Button label="Test" id="btnTest" click="btnTest_clickHandler(event)" />
					</s:HGroup>
				</mx:FormItem>
				
		
			</mx:Form>
				
		
		 </s:VGroup>
			<utils:CloseBtn  label="X" click="button1_clickHandler(event)" right="0" top="0" />
			
			<utils:IconButton  label="X"  iconSkin=".closeBtn" 
							   click="button1_clickHandler(event)" right="5" top="10" />
		</s:Group>
		
		
		<view:GraphWidget  id="widget"  />
</s:HGroup>
	
	

</popup:PopupBase>
