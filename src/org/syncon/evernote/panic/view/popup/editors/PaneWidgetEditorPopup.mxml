<?xml version="1.0" encoding="utf-8"?>
<popup:PopupBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx"
				 xmlns:comps="org.syncon.comps.*" 
				 creationComplete="onInit()" 
				 implements="org.syncon.popups.view.IPopup"
				 xmlns:popup="org.syncon.evernote.basic.view.popup.*" 
				 xmlns:editors="org.syncon.evernote.panic.view.popup.editors.*" 
				 xmlns:utils="org.syncon.evernote.panic.view.utils.*" xmlns:view="org.syncon.evernote.panic.view.*" xmlns:tlf="net.asciiworks.tlf.*"					  
				 >
	
	<fx:Script>
		<![CDATA[
			import mx.events.ColorPickerEvent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.controller.WidgetEvent;
			import org.syncon.evernote.panic.view.PaneWidget;
			import org.syncon.evernote.panic.vo.WidgetVO;
			import org.syncon.popups.view.IPopup;
			
			import sss.Shelpers.Shelpers.ui.PopupCode;
			
			public var ui : PaneWidget; 
			static public var EDIT_FORE : String = 'editFore'; 
			static public var EDIT_BG : String = 'editBg'; 			
			
			override public function onInit() : void 
			{
				this.creationComplete = true; 
				this.popupCode.center()
			}
			
			
			override public  function create(app:Object)  : IPopup
			{
				var popup :  PaneWidgetEditorPopup = new PaneWidgetEditorPopup()
				popup.popupCode = PopupCode.Create( popup, app ) 
				return popup			
			} 
			
			override public function show(  )  : void
			{
				this.popupCode.open( false,true ) 
			}
			
			public function open( a :  WidgetVO  )  : void
			{
				this.popupCode.open( false, true ) 
				this.dispatchEvent( new WidgetEvent( WidgetEvent.EDIT_WIDGET, null,  a ) )
				this.ui = a.ui as PaneWidget; 
			}
 
			
			override public function hide( ) : void
			{
				this.popupCode.close() 
			}
			
			
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				this.hide()
			}
			
			
			protected function btnOk_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( WidgetEvent.UPDATE_WIDGET_CONFIG ) ) 
			}
			
			protected function btnTest_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent(  WidgetEvent.TEST_WIDGET ) ) 
			}			
			

			protected function changed(event: Event):void
			{
				// maybe have a difefenret event as we dont' want to run transitions here 
				this.dispatchEvent( new CustomEvent(  WidgetEvent.TEST_WIDGET ) ) 
				// TODO Auto-generated method stub
			}


			protected function btnHelpTextSource_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent(  'helpSources' ) ) 
			}
			protected function btnEdit_clickHandler (event:String, txt : String):void
			{
				this.dispatchEvent( new CustomEvent(  event, txt ) ) 
			}			

		]]>
	</fx:Script>
	
	
	<s:VGroup>
		<s:HGroup>
			

	<s:Group id="groupHolder">
		
	
	<editors:PopupBg />
	
		
		<s:VGroup gap="0"  paddingTop="10" paddingBottom="10" paddingRight="10" paddingLeft="10" >
			<popup:PopupHeader  bold="false"   label="Edit Pane"  padding="0"  width="100%"/>
			
			<mx:Form>
				<mx:FormItem label="Text Source"  direction="horizontal">
					<s:TextArea   heightInLines="3" id="txtMessage" width="200" 
								  change="changed(event)"
								 toolTip="Text source for the top layer" />
					<utils:IconButton iconSkin=".btnTextEditor" toolTip="Edit Source"
									  id="btnTextValue" click="btnEdit_clickHandler(EDIT_FORE, this.txtMessage.text)" />
					<utils:HelpButton  toolTip="Help with Source" />
				</mx:FormItem>
				<mx:FormItem label="Bg Source"  direction="horizontal">
					<s:TextArea id="txtMessageBg" width="200" 
								 heightInLines="3"  
								 change="changed(event)"
								 toolTip="Text source for the bottom layer" />
					<utils:IconButton iconSkin=".btnTextEditor" toolTip="Edit Source"
									  id="btnTextValue1" click="btnEdit_clickHandler(EDIT_BG, this.txtMessageBg.text)" />
					<utils:HelpButton  toolTip="Help with Source" />
				</mx:FormItem>			
				
				<mx:FormItem label="Color 1" >
					<mx:ColorPicker id="colorPicker1" change="changed(event)"/>
				</mx:FormItem>	
				<mx:FormItem label="Color 2" >
					<mx:ColorPicker id="colorPicker2" change="changed(event)"/>
				</mx:FormItem>
				<mx:FormItem label="Custom Gradient"  direction="horizontal">
					<s:TextArea id="txtCustomGradientBg" width="200" 
								 heightInLines="3"  change="changed(event)"
								 toolTip="Define more elaborate gradients, overrides the colors used agoave" />
					<utils:HelpButton  toolTip="Help with Source" />
				</mx:FormItem>		
				<mx:FormItem label="Corner Radius" >
					<s:NumericStepper id="txtCornerRadius" width="200"  minimum="0" maximum="100"
								 toolTip="How round to make corners?" 
								 change="changed(event)"
								 />
				</mx:FormItem>					
				<editors:WidgetUpdateSettingsControlBox id="timer"  width="100%"/>
				<mx:FormItem>
					<s:HGroup>
						<s:Button label="Ok" id="btnOk" click="btnOk_clickHandler(event)" />
						<s:Button label="Test" id="btnTest" click="btnTest_clickHandler(event)" />
					</s:HGroup>
				</mx:FormItem>
			
				
			</mx:Form>
			
			
		</s:VGroup>
		
		<utils:CloseBtn  label="X" click="button1_clickHandler(event)" right="0" top="0" />
		
		<utils:IconButton  label="X"  iconSkin=".closeBtn" 
						   click="button1_clickHandler(event)" right="5" top="10" />
		
	</s:Group>
			
		

			<view:PaneWidget id="widget"  />
		</s:HGroup>


	</s:VGroup>
</popup:PopupBase>
