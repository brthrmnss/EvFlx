<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		  left="0" left.right="{NaN}" right.left="{NaN}" right.right="0"
		 creationComplete="onInit()" xmlns:view="org.syncon.evernote.panic.view.*" xmlns:utils="org.syncon.evernote.panic.view.utils.*"
		 >
	
	
	<s:states> 
		<s:State name="left"/> 
		<s:State name="right"/> 
	</s:states> 		
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.vo.WidgetVO;
			
			import spark.events.IndexChangeEvent;
			public var creationComplete : Boolean = false; 
			
			public var dp : ArrayCollection = new ArrayCollection()
			
			static public var addItem : String = ''
			
			protected function onInit():void
			{
				this.creationComplete = true
				var options : Array = [];
				var options1 : Array = ['Graph', 'Project List', 'Twitter Messages', 'Message', 'Spacer', 'Window Pane', 'Row' ] 
				var options2 : Array = [WidgetVO.GRAPH,WidgetVO.PROJECT_LIST, WidgetVO.TWITTER_SCROLLER, 
														WidgetVO.MESSAGE, WidgetVO.SPACER, WidgetVO.PANE, WidgetVO.ROW ] 					
				for  ( var i : int = 0 ; i < options1.length; i++)
				{
					var obj : Object = new Object()
					obj.label = options1[i]
					obj.type = options2[i]
					options.push( obj ) 
				}
				this.dp.addAll( new ArrayList( options  ) ) 
				this.list.dataProvider = this.dp
					
				this.btnCancel.visible = false; 
				this.show()
					
				this.currentState = 'left' 
			}

			public function show() : void
			{
				this.fxFadeIn.show()
				//this.visible = true; 
			}
			
			public function hide() : void
			{
				this.fxFadeIn.hide()
				//this.visible = false; 
			}			
			
			
			protected function list_changeHandler(event:IndexChangeEvent):void
			{
				this.dispatchEvent( new CustomEvent( addItem, this.dp.getItemAt( event.newIndex ).type )  )
			}

			public function set message ( s : String ) : void
			{
				this.lblMessage.text = s; 
			}

			protected function btnCancel_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( 'cancelSelect' ) ) 
			}
			protected function btnMove_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( 'moveWidget' ) ) 
			}			
			
		]]>
	</fx:Script>
	
	<s:filters>
		<s:DropShadowFilter
			alpha="0.5" 
			angle="45.0" angle.right="225" blurX="4.0" blurY="4.0" color="0x000000" 
			distance="2" hideObject="false" inner="false" knockout="false" quality="2" 
			strength="1"/>
	</s:filters>
	<utils:FadeInOutByFunction id="fxFadeIn"  maxAlpha="0.95"/>
	<s:Rect right="0" left="-1" top="0" bottom="0"
			topLeftRadiusX="10" topLeftRadiusY="-10"
			topRightRadiusX="10" topRightRadiusY="10"
			bottomLeftRadiusX="10" bottomLeftRadiusY="-10"
			bottomRightRadiusX="10"  bottomRightRadiusY="10"
			
			right.right="-1" left.right="0"  
			topLeftRadiusX.right="10" topLeftRadiusY.right="10"
			topRightRadiusX.right="0" topRightRadiusY.right="10"
			bottomLeftRadiusX.right="10" bottomLeftRadiusY.right="10"
			bottomRightRadiusX.right="0"  bottomRightRadiusY.right="10"
			
			>
		<s:fill>
			<s:SolidColor color="0xFFFFFF" />
		</s:fill>
		<s:stroke>
			<s:SolidColorStroke color="0"  pixelHinting="true"  weight="1"/>
		</s:stroke>
	</s:Rect>
	
	
	<utils:IconButton iconSkin=".btnRefresh" id="btnMove"  toolTip="Move to other side (if it's in the way)"
					 right="5" top="5"
					  click="btnMove_clickHandler(event)"/>
	
	<s:VGroup  paddingBottom="10" paddingLeft="10" paddingTop="10" paddingRight="10" >
		<s:Label text="Add A:" />
		<s:List id="list" change="list_changeHandler(event)" borderVisible="false" labelField="label">
			
		</s:List>
		<s:Label  id="lblMessage" color="0xFF0000"  width="100"/>
		<s:Button  label="Cancel" id="btnCancel" click="btnCancel_clickHandler(event)" />
	</s:VGroup>

</s:Group>
