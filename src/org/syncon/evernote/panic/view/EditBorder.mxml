<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 width="100%" height="100%"
		 fontSize="12"  color="0"
		 xmlns:mx="library://ns.adobe.com/flex/mx"   initialize="group1_initializeHandler(event)"
		 creationComplete="onInit()" xmlns:view="org.syncon.evernote.panic.view.*"
		 xmlns:utils="org.syncon.evernote.panic.view.utils.*" xmlns:utils1="org.syncon.utils.*"
		 >

	<fx:Script>
		<![CDATA[
			import mx.core.IUIComponent;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.view.assets.Icons;
			
			public var creationComplete : Boolean = false; 
			
			public var editMode : Boolean = false; 
			
			static public var CLICKED : String  = 'clicked_'
			static public var CLICKED_EDIT : String  = 'clickedEdit'				
			static public var CLICKED_REMOVE : String  = 'clickedRemove'				
			static public var CLICKED_LEFT : String  = 'clickedLeft'				
			static public var CLICKED_RIGHT : String  = 'clickedRight'						
			
			static public var ADJUST_ARROWS : String  = 'show_'
				
			protected function onInit():void
			{
				this.creationComplete = true
				//this.fxFader.duration = 850
				this.setupRollover();
			}

			protected function btnEdit_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent(CLICKED_EDIT ));
			}

			
			protected function btnRemove_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent(CLICKED_REMOVE ) );
			}			
			
			
			protected function btnLeft_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent(CLICKED_LEFT ) );
			}			
			
			protected function btnRight_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent(CLICKED_RIGHT) );
			}			
			
			public function show() : void
			{
				//return;
				this.fxFader.show()
			}
			
			public function hide()  : void
			{
				this.fxFader.hide()
				
			}
			
			protected function group1_initializeHandler(event:FlexEvent):void
			{
				this.hide()
				this.txtInstructions.visible = false; 
			}

			public var edit : UIComponent ; 

			protected function group2_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( CLICKED  ) ) 
				event.stopImmediatePropagation()
			}


			protected function fxFadeOut_effectStopHandler(event:EffectEvent):void
			{
				// TODO Auto-generated method stub
			}

			
			
			public function setupRollover() : void
			{
				this.fxFader_BorderHighlight.hide()
				this.addEventListener(MouseEvent.ROLL_OVER, this.group1_rollOverHandler,  false, 0, true ) 
				this.addEventListener(MouseEvent.ROLL_OUT, this.group1_rollOutHandler,  false, 0, true ) 
			}
			
			public var highlightBordersOnRollover : Boolean = false; 
			protected function group1_rollOutHandler(event:MouseEvent):void
			{
				this.fxFader_BorderHighlight.hide()
			}


			protected function group1_rollOverHandler(event:MouseEvent):void
			{
				if ( this.highlightBordersOnRollover )
				this.fxFader_BorderHighlight.show()
			}
			
			
			private function mouseDownHandler(e:MouseEvent):void {
				DragManager.doDrag(e.currentTarget as IUIComponent, null, e);
			}
			
			private function dragEnterHandler(e:DragEvent):void {
				DragManager.acceptDragDrop(e.currentTarget as IUIComponent);
			}
			
			private function dragDropHandler(e:DragEvent):void {
				e.currentTarget.addElement(e.dragInitiator);
			}
			//http://saturnboy.com/2009/08/drag-and-drop-flex-4/
			//http://www.google.com/search?q=e+Adobe+Flex+3+Dashboard+sample&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a#hl=en&expIds=17259,18167,20782,24472,26095,26562,26637,27059,27147,27163,27182&sugexp=ldymls&xhr=t&q=++Adobe+Flex+3+Dashboard+sample&cp=1&pf=p&sclient=psy&client=firefox-a&hs=jeT&rls=org.mozilla:en-US%3Aofficial&source=hp&aq=f&aqi=&aql=&oq=++Adobe+Flex+3+Dashboard+sample&gs_rfai=&pbx=1&fp=9a951961ff9ba31d

		]]>
	</fx:Script>
 <utils:FadeInOutByFunction id="fxFader" visible="false" />
	
	<utils:FadeInOutByFunction id="fxFader_BorderHighlight" adjust="{this.borderHighlight}" visible="false" />
	
	
	<s:Group buttonMode="true" useHandCursor="true" 
			 right="1" left="1" top="1" bottom="1" 
			 click="group2_clickHandler(event)" >
		<!--right="1" left="1" top="1" bottom="1" -->
		<s:Rect id="borderEdit"  right="1" left="1" top="1" bottom="1"     >
			<s:stroke>
				<s:SolidColorStroke color="0x83F52C" />
			</s:stroke>
			<s:fill>
				<s:SolidColor  id="bgColor" color="0" alpha="0.6" />
			</s:fill>
		</s:Rect>
		<s:Group id="borderEdit2"   mouseDown="mouseDownHandler(event)" 
    			right="2" left="2" top="2"    height="40"   >
			<s:Rect  right="0" left="0" top="0"  bottom="0"  >
				<s:fill>
					<s:SolidColor color="0xFFFFFF" alpha="0.8" />
				</s:fill>
			</s:Rect>	
		</s:Group>			
			
		<s:Label text="ADD AFTER THIS"  id="txtInstructions"
				 color="0xFFFFFF"
				 verticalCenter="0" horizontalCenter="0" fontSize="18"/>
	</s:Group>
	
	
	<s:Group buttonMode="true" useHandCursor="true" 
			 right="1" left="1" top="1" bottom="1" id="borderHighlight" 
			 alpha="0"
			  >
		<s:Rect   right="1" left="1" top="1" bottom="1"   >
			<s:stroke>
				<s:SolidColorStroke color="0xFF0000" weight="2" />
			</s:stroke>
		</s:Rect>
	 
	</s:Group>
	
	<!--   content="{Icons.get('')}" -->
	<s:Group 	left="10" width="100%">

	<s:layout>
		<utils1:FlowLayout2   gap="2"  paddingLeft="-5" verticalGap="10"   />
		<!--<s:HorizontalLayout paddingBottom="10" paddingLeft="10" 
							paddingTop="10" paddingRight="10" 
						/>-->
	</s:layout>
		
		
		<s:HGroup id="goBtn" >
			<utils:IconButton label="L"  id="btnLeft" click="btnLeft_clickHandler(event)" 
					  toolTip="Move Left"
					  content="{Icons.getFormatPainter( '.btnLeft' )}"  />
			<utils:IconButton label="R"  id="btnRight" click="btnRight_clickHandler(event)" 
					  toolTip="Move Right"
					  content="{Icons.getFormatPainter( '.btnRight' )}"   />
			<!--			
			<s:Button label="L" width="20" />
			<s:Button label="R" width="20" />
			-->
		</s:HGroup>
		
	
		<utils:IconButton label="edit"  id="iconType"   
						    alpha="0.6" useHandCursor="false" buttonMode="false"
						  content="{Icons.getFormatPainter( '.iconSettings' )}"    />		
		
		
		<utils:IconButton label="edit"  id="btnEdit" click="btnEdit_clickHandler(event)" toolTip="Edit Item"
				  content="{Icons.getFormatPainter( '.iconSettings' )}"    />
		<utils:IconButton label="X"  id="btnRemove" click="btnRemove_clickHandler(event)" toolTip="Remove Item"
				  content="{Icons.getFormatPainter( '.closeBtn' )}"   />
		<s:Label id="lblName" />
		<s:Label id="lblDesc" />
	</s:Group>

	

</s:Group>
