<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		 creationComplete="onInit()" 
	 
		 contentBackgroundColor="0xFF0000" contentBackgroundAlpha="1"
		 implements="org.syncon.evernote.panic.view.IUIWidget"
	 	xmlns:view="org.syncon.evernote.panic.view.*"
		 clipAndEnableScrolling="false"
		 >
	
	<fx:Metadata>
		[Event(name="tagsChanged", type="org.syncon.evernote.basic.model.CustomEvent")]
	</fx:Metadata>		
	
	<fx:Declarations>
		<s:Fade id="faFade" duration="500" alphaFrom="0" alphaTo="1" />
		<s:Fade id="faFadeOut" duration="500" alphaFrom="1" alphaTo="0" />
		<s:Move id="moveX" duration="500" />
		<s:Move id="moveY" duration="500" />
	</fx:Declarations>	
	
	<fx:Script>
		<![CDATA[
			import mx.core.FlexVersion;
			import mx.core.IUIComponent;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.controller.WidgetEvent;
			import org.syncon.evernote.panic.vo.WidgetVO;
			static public var ADD_UI : String = 'addUi'				
			
			/**
			 * Flag indiates whether tags should be removed instantly 
			 * */
			public var creationComplete : Boolean = false; 
			
			private var _widgetData : WidgetVO = new WidgetVO
			public function set  widgetData ( w : WidgetVO )  : void { this._widgetData = w }
			public function get   widgetData (  )  : WidgetVO { return this._widgetData; }	
			
			public var message :  String = ''; 
			
			protected function onInit():void
			{
				this.creationComplete = true
					//this.swapElementsAt( 0 , this.numElements-1 )
			}				
 
			public function importConfig(j :  WidgetVO )  : void
			{
				this.widgetData = j
				this.message = j.source;  
				this.dispatchEvent( new WidgetEvent(WidgetEvent.IMPORT_CONFIG,  j ) )
				
			}
			public function importData_( o:   Object )  : void
			{
			}		
			static public function importData( name : String, desc:String,  
											  source : String='',   refreshTime :  Number=15000)  :   MessageWidget
			{
				var o : Object = {}
				var vo : WidgetVO = new WidgetVO(WidgetVO.MESSAGE, o); 	
				var g : MessageWidget = new MessageWidget()
				g.widgetData = vo
					
				vo.name = name; 
				vo.description = desc
				vo.source = source; 
				vo.refreshTime = refreshTime; 
				
				return g ; 
			}						
			
			public function exportConfig( ) : WidgetVO    
			{
				return this._widgetData; 
			}		
			
			
			public function showEdit() : void
			{
				this.editBorder.show()
			}
			
			public function hideEdit()  : void
			{
				this.editBorder.hide()
			}						
			
			public function addWidget( i : IUIWidget ) : void
			{
				//this.dispatchEvent( new CustomEvent( BoardRow.ADD_UI, i ) ) 
				var ui  :   IUIWidget =i as IUIWidget; 
				var ui2 :  UIComponent =i as UIComponent
				ui2.percentHeight = 100; 
				ui.importConfig( ui.widgetData ); 
				var percentWidth : Number = 100* 1/(this.content.numElements+1)
				this.content.addElement( ui as  IVisualElement ); 
				var hgroup : HGroup = this.content; 
				for ( var z : int =0 ; z < hgroup.numElements; z++ )
				{
					var   j :     UIComponent  = hgroup.getElementAt(z)  as  UIComponent; 
					j.percentWidth = percentWidth
				}					
			}
			
			public function refresh(temp  : WidgetVO= null) : void
			{
				var useSettings : WidgetVO = this.widgetData; 
				if ( temp != null ) 
					useSettings = temp; 
				this.dispatchEvent( new WidgetEvent( WidgetEvent.AUTOMATE_WIDGET,
					null, useSettings ) ) 
			}				
			/* 
			override public function setLayoutBoundsPosition(x:Number, y:Number, postLayoutTransform:Boolean=true):void
			{
				var pt : Point =  setLayoutBoundsPosition2(this,x,y,postLayoutTransform? nonDeltaLayoutMatrix():null);
				this.moveX.xFrom = this.x
				this.moveX.xTo = pt.x; 
				this.moveX.duration = 500
				this.moveX.stop()
					
				this.moveY.xFrom = this.y
				this.moveY.xTo = pt.y; 
				this.moveY.duration = 500
				this.moveY.stop()					
			}
			
			
			public   function setLayoutBoundsPosition2(obj: IUIComponent,x:Number, y:Number, transformMatrix:Matrix):Point
			{
				if (transformMatrix)
				{
					//race("Setting actual position to " + x + "," + y);
					//race("\tcurrent x/y is " + obj.x + "," + obj.y); 
					//race("\tcurrent actual position is " + actualPosition.x + "," + actualPosition.y);
					x = x - getLayoutBoundsX2(obj,transformMatrix) + obj.x;
					y = y - getLayoutBoundsY2(obj,transformMatrix) + obj.y;
				}
				//obj.move(
				//obj.move(x, y);
				var pt : Point = new Point(x,y)
				return pt 
			}			
			
			
			public static function getLayoutBoundsX2(obj:IUIComponent,transformMatrix:Matrix):Number
			{
				if (transformMatrix == null)
					return obj.x;
				
				
				var width:Number = obj.width;
				var height:Number = obj.height;
				
				if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_0)
				{
					width = (obj.scaleX == 0) ? 0 : width / obj.scaleX;
					height = (obj.scaleY == 0) ? 0 : height / obj.scaleY;
				}
				
				// We are already taking scale into account from the transform,
				// so adjust here since IUIComponent mixes it with width/height
				var pos:Point = new Point();
				MatrixUtil.transformBounds(width, height,
					transformMatrix,
					pos);
				return pos.x;
			}
			import mx.utils.MatrixUtil
			public static function getLayoutBoundsY2(obj:IUIComponent,transformMatrix:Matrix):Number
			{
				if (transformMatrix == null)
					return obj.y;
				
				
				var width:Number = obj.width;
				var height:Number = obj.height;
				
				if (FlexVersion.compatibilityVersion < FlexVersion.VERSION_4_0)
				{
					width = (obj.scaleX == 0) ? 0 : width / obj.scaleX;
					height = (obj.scaleY == 0) ? 0 : height / obj.scaleY;
				}
				
				// We are already taking scale into account from the transform,
				// so adjust here since IUIComponent mixes it with width/height
				var pos:Point = new Point();
				MatrixUtil.transformBounds(width, height,
					transformMatrix,
					pos);
				return pos.y;
			}			
			 */
		]]>
	</fx:Script>
  
	<s:HGroup id="content"   height="100%" width="100%" />
	<!--
	right="0" left="0" top="0" bottom="0"
	-->
	<view:EditBorder2 id="editBorder"  edit="{this}"   />
</s:Group>
