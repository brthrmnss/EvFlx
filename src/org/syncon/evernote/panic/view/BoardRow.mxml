<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		 creationComplete="onInit()" 
		 contentBackgroundColor="0xFF0000" contentBackgroundAlpha="1"
		 implements="org.syncon.evernote.panic.view.IUIWidget"
	 	xmlns:view="org.syncon.evernote.panic.view.*"
		 clipAndEnableScrolling="false"
		 >
	
	<fx:Metadata>
		[Event(name="tagsChanged", type="org.syncon.evernote.basic.model.CustomEvent")]
	</fx:Metadata>		
	
	<fx:Script>
		<![CDATA[
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.controller.WidgetEvent;
			import org.syncon.evernote.panic.vo.WidgetVO;
			static public var ADD_UI : String = 'addUi'				
			
			/**
			 * Flag indiates whether tags should be removed instantly 
			 * */
			public var creationComplete : Boolean = false; 
			
			private var _widgetData : WidgetVO = new WidgetVO
			public function set  widgetData ( w : WidgetVO )  : void { this._widgetData = w }
			public function get   widgetData (  )  : WidgetVO { return this._widgetData; }	
			
			public var message :  String = ''; 
			
			protected function onInit():void
			{
				this.creationComplete = true
					//this.swapElementsAt( 0 , this.numElements-1 )
			}				
 
			public function importConfig(j :  WidgetVO )  : void
			{
				this.widgetData = j
				this.message = j.source;  
				this.dispatchEvent( new WidgetEvent(WidgetEvent.IMPORT_CONFIG,  j ) )
				
			}
			public function importData_( o:   Object )  : void
			{
			}		
			static public function importData( name : String, desc:String,  
											  source : String='',   refreshTime :  Number=15000)  :   MessageWidget
			{
				var o : Object = {}
				var vo : WidgetVO = new WidgetVO(WidgetVO.MESSAGE, o); 	
				var g : MessageWidget = new MessageWidget()
				g.widgetData = vo
					
				vo.name = name; 
				vo.description = desc
				vo.source = source; 
				vo.refreshTime = refreshTime; 
				
				return g ; 
			}						
			
			public function exportConfig( ) : WidgetVO    
			{
				return this._widgetData; 
			}		
			
			
			public function showEdit() : void
			{
				this.editBorder.show()
			}
			
			public function hideEdit()  : void
			{
				this.editBorder.hide()
			}						
			
			public function addWidget( i : IUIWidget ) : void
			{
				//this.dispatchEvent( new CustomEvent( BoardRow.ADD_UI, i ) ) 
				var ui  :   IUIWidget =i as IUIWidget; 
				var ui2 :  UIComponent =i as UIComponent
				ui2.percentHeight = 100; 
				ui.importConfig( ui.widgetData ); 
				var percentWidth : Number = 100* 1/(this.content.numElements+1)
				this.content.addElement( ui as  IVisualElement ); 
				var hgroup : HGroup = this.content; 
				for ( var z : int =0 ; z < hgroup.numElements; z++ )
				{
					var   j :     UIComponent  = hgroup.getElementAt(z)  as  UIComponent; 
					j.percentWidth = percentWidth
				}					
			}
			
		]]>
	</fx:Script>
  
	<s:HGroup id="content"   height="100%" width="100%" />
	<!--
	right="0" left="0" top="0" bottom="0"
	-->
	<view:EditBorder2 id="editBorder"  edit="{this}"   />
</s:Group>
