<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx"  
						 fontWeight="bold"
						   implements="org.syncon.evernote.panic.view.IUIWidget"
						   creationComplete="onInit()" resize="group1_resizeHandler(event)"
						   fontSize="24" clipAndEnableScrolling="true" color="{fontColor}"
						   xmlns:view="org.syncon.evernote.panic.view.*"
						 >
	<!--addedEffect="{this.faFade}" removedEffect="{this.faFadeOut}"-->
	<fx:Metadata>
		[Event(name="tagsChanged", type="org.syncon.evernote.basic.model.CustomEvent")]
	</fx:Metadata>		
	
	<fx:Declarations>
		<s:Fade id="faFade" duration="500" alphaFrom="0" alphaTo="1" />
		<s:Fade id="faFadeOut" duration="500" alphaFrom="1" alphaTo="0" />
	 
	</fx:Declarations>
	
	<s:transitions>
		<s:Transition toState="*" autoReverse="true" >
			<s:Fade targets="{[this.myChart3, this.myChart4, this.chart]}"     
					duration="1500" />
		</s:Transition>
	</s:transitions>	 
	
	
	<fx:Script>
		<![CDATA[
			import mx.events.ResizeEvent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.controller.WidgetEvent;
			import org.syncon.evernote.panic.vo.WidgetVO;
			
			import spark.filters.DropShadowFilter;
			static public var TAGS_CHANGED : String = 'tagsChanged'				
				
			/**
			 * Flag indiates whether tags should be removed instantly 
			 * */
			public var creationComplete : Boolean = false; 
			private var _widgetData : WidgetVO = new WidgetVO
				
			//public var labelBottom : String = ''; 
			//public var labelTop : String = ''; 
			//public var maximum : Number = NaN; 	
			
			
			public function set  widgetData ( w : WidgetVO )  : void { this._widgetData = w }
			public function get   widgetData (  )  : WidgetVO { return this._widgetData; }
			import mx.collections.ArrayCollection;
			
/* 			public var expenses:ArrayCollection = new ArrayCollection([
				{Month:"Jan", Profit:2000, Expenses:1500},
				{Month:"Feb", Profit:1000, Expenses:200},
				{Month:"Mar", Profit:1500, Expenses:500}
			]);
			 */
			[Bindable] public var fontColor : uint = 0xFFFFFF;
			[Bindable]
			public var expenses:ArrayCollection = new ArrayCollection([
				{Month:"Jan", Expenses:1500},
			]);
			[Bindable] public var expenses2:ArrayCollection = new ArrayCollection([
				{Expense:"Taxes", Amount:2000},
				{Expense:"Rent", Amount:1000},
				{Expense:"Bills", Amount:100},
				{Expense:"Car", Amount:450},
				{Expense:"Gas", Amount:100},
				{Expense:"Food", Amount:200} ] );

				[Bindable]
			private var expensesAC:ArrayCollection = new ArrayCollection( [
				{ Month: "Jan", Profit: 2000, Expenses: 1500, Amount: 450 },
				{ Month: "Feb", Profit: 1000, Expenses: 200, Amount: 600 },
				{ Month: "Mar", Profit: 1500, Expenses: 500, Amount: 300 },
				{ Month: "Apr", Profit: 1800, Expenses: 1200, Amount: 900 },
				{ Month: "May", Profit: 2400, Expenses: 575, Amount: 500 } ]);
				
				
			protected function onInit():void
			{
				 this.creationComplete = true
			//	this.importConfig( this._widgetData );
				 group1_resizeHandler(null)
				 this.chart.alpha = 0; 
				// this.currentState = 'pieChart'
				 //this.currentState = 'lineChart'
			}				
				
			
			override public function set  width ( w : Number )  : void
			{
				super.width = w; 
				//this.height = w*(115/99) 
				this.height = 300
				this.chart.height = this.height - 100
				this.chart.width = w*2
				//if ( this.myChart3 != null ) 
				//{
						
				//}
			}
			[Bindable] private var pieHeight : Number = 100;
			[Bindable] private var pieWidth : Number = 100;			
			protected function group1_resizeHandler(event:ResizeEvent):void
			{
				if ( this.percentWidth != 0 &&  isNaN( this.percentWidth ) == false ) 
				{
					
					var w : Number = this.parentDocument.width*this.percentWidth/100//*(115/99)
					//if ( this.data.vo.height == NaN ) 
					
					///this.width = w; 
					this.height = 300
					this.chart.height = this.height - 100
					 this.chart.width = w*1.3				  
					this.hrLine.width = w*1.5
						
					pieHeight = w*1.5
					pieWidth = w*1.5		
					pieHeight = w*1.1
					pieHeight = 300 - 80-15-5
					pieWidth = w*.95//								
				}
			}			
			
			public function set textTop( s : String )  : void
			{
				this.lblTop.text = s.toUpperCase()
			}			
			
			public function set textBottom( s : String )  : void
			{
				this.lblBottom.text = s.toUpperCase()
			}
			
			public function set fillC( s : uint )  : void
			{
				this.fade.play([this.chart] ) 
				//s = 0xd2d2d2
				this.fillColor_.color = s; 
				//columnSeries.setStyle('fill', this.fillColor_ ) 
				columnSeries.setStyle('fills', [this.fillColor_] ) 
			}
			
			public function set value ( s : Object )  : void
			{
				if ( s.toString().indexOf('[') == -1 ) 
					s = Number( s ) 
				if ( s is Number ) 
					this.expenses.getItemAt(0).Expenses = s
						
				this.chart.dataProvider = this.expenses; 
			}
			
			public function set maximum ( s : Object )  : void
			{
				if ( s.toString().indexOf('[') == -1 ) 
					s = Number( s ) 
				if ( s is Number ) 
					this.a2.maximum = s as Number; 
			}
			
			/**
			 * Update settings from .... data on config 
			 * two settings 
			 * 
			 * config data 
			 * actual values set 
			 * the temporary values 
			 * 
			 * setter function 
			 * getter function? 
			 * 
			 * to udpate ... pass in temporarly widgetVO
			 * */
			public function refresh(temp  : WidgetVO= null) : void
			{ 
				var useSettings : WidgetVO = this.widgetData; 
				if ( temp != null ) 
					useSettings = temp; 
				this.dispatchEvent( new WidgetEvent( WidgetEvent.AUTOMATE_WIDGET,
					null, useSettings ) ) 

			}
			
						/**
						 * how tomake sure changes are propgated to vo? 
						 * when ou change them ... call a update vo function 
						 * make in interface, desigend to take props from component and 
						 * copy back to vo the intervew of import config ... 
						 * oh we alreay hae that it's called export great. 
						 * */
 			public function importConfig(j :  WidgetVO )  : void
			{
				if ( j.data == null ) 
					return;
				this.widgetData = j
				this.widgetData.ui = this; 
				this.dispatchEvent( new WidgetEvent(WidgetEvent.IMPORT_CONFIG,  j ) )
					
				this.refresh()
			}
						
			public function importData_( o:   Object )  : void
			{
			}		
			static public function importData( name : String, desc:String, labelTop : String, 
			labelBottom : String, value :  Object, max : Object= null, fillColor : uint = NaN, 
			bgSource : String = '', 
			 refreshTime :  Number=15000)  :  GraphWidget
			{
				var o : Object = {}
				var vo : WidgetVO = new WidgetVO(WidgetVO.GRAPH, o); 	
				var g : GraphWidget = new GraphWidget()
				g.widgetData = vo
				vo.ui = g;
				
				vo.name = name; 
				vo.description = desc
				//vo.source = source; 
				vo.refreshTime = refreshTime; 
				
				o.fillColor = fillColor
				o.labelTop = labelTop
				o.labelBottom = labelBottom
				o.max = max; 
				
				vo.background = bgSource; 
				//a string .. that is scrted to anumber later
				vo.source = value.toString(); 
				return g ; 
			}			
			public function exportConfig( ) : WidgetVO    
			{
				//if not created, don't try to load from ui 
				if ( this.creationComplete == false ) 
					return this._widgetData.clone(); 
				//u can't pull the values like this ... what if they're sourced?
				/*
				_widgetData.data.fillColor = this.fillColor_.color; 
				_widgetData.data.labelTop = labelTop
				_widgetData.data.labelBottom = labelBottom
				_widgetData.data.max = this.maximum; 
				*/				
				return this._widgetData.clone(); 
			}			
			
			
			public function showEdit() : void
			{
				this.editBorder.show()
			}
			
			public function hideEdit()  : void
			{
				this.editBorder.hide()
			}						
		]]>
	</fx:Script>

	<fx:Style>
		.myAxisStyle {
			placement:bottom;
			minorTickPlacement:none;
			tickLength:12;
			tickPlacement:none;
		}
		.myStyle {
			direction:"none";
			horizontalShowOrigin:true;
			horizontalTickAligned:false;
			horizontalChangeCount:0; 
			verticalShowOrigin:false;
			verticalTickAligned:false; 
			verticalChangeCount:0;
			horizontalFill:#990033;
			horizontalAlternateFill:#00CCFF;      
		}  		
	</fx:Style>
	
	<fx:Declarations>
		<!--<s:SolidColor id="fillColor_" color="0xFFDDFF" />-->
		<s:SolidColor id="fillColor_" color="#990033" />
		<s:Fade id="fade" duration="1500"  alphaTo="1" />
		<!-- Define chart effect. -->  
		<mx:SeriesInterpolate id="rearrangeData" 
							  duration="1000" 
							  minimumElementDuration="200" 
							  elementOffset="0"
							  />
	</fx:Declarations>
	
	<fx:Declarations>
		<!-- Define custom colors for use as fills in the AreaChart control. -->
		<mx:SolidColor id="sc1" color="blue" alpha=".3"/>
		<mx:SolidColor id="sc2" color="red" alpha=".3"/>
		<mx:SolidColor id="sc3" color="green" alpha=".3"/>
		
		<!-- Define custom Strokes. -->
		<mx:SolidColorStroke id = "s1" color="blue" weight="2"/>
		<mx:SolidColorStroke id = "s2" color="red" weight="2"/>
		<mx:SolidColorStroke id = "s3" color="green" weight="2"/>
	</fx:Declarations>

	
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="pieChart"/> 
		<s:State name="lineChart"/> 		
	</s:states>
	<!--
	<view:BgWidget />
	-->
	<s:RichText width="100%" height="100%" id="txtBg" 
				fontLookup="embeddedCFF" fontSize="13" renderingMode="cff"
				paddingBottom="0" paddingLeft="0"  fontFamily="ACaslonProRegularEmbedded"
				paddingTop="0" paddingRight="0" 
				/>	
	
	<s:VGroup  horizontalCenter="0"
			   horizontalAlign="center" clipAndEnableScrolling="false"  width="100%">
		
	
	 
	<s:Label text="..." fontSize="36" id="lblTop" />
		
		<s:VGroup includeIn="normal"  id="holderForGraphAndhrLine" gap="-3"    horizontalAlign="center" >
			
		
	<mx:BarChart height="80"    id="chart"  seriesFilters="[]"
				 alpha.normal="1" alpha="0"   
				  dataProvider="{expenses}"  >
		<mx:backgroundElements>
		</mx:backgroundElements>
		
		<mx:horizontalAxisRenderers>
			<mx:AxisRenderer  
				axis="{a1}" styleName="myAxisStyle" showLabels="false"
				showLine="false"/>
		</mx:horizontalAxisRenderers>
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer  
				axis="{a1}" styleName="myAxisStyle" showLabels="false"
				showLine="false"
				/>
		</mx:verticalAxisRenderers>		
		
		<mx:horizontalAxis>
			<mx:CategoryAxis  id="a1" 
				dataProvider="{expenses}" 
				categoryField="Month"
				/>
		</mx:horizontalAxis>
		<mx:verticalAxis>
			<mx:LinearAxis  id="a2" 
							 
							   baseAtZero="true"
							  />
		</mx:verticalAxis>		
		<mx:series>
			<mx:ColumnSeries 
				xField="Month"   showDataEffect="rearrangeData"
				yField="Expenses"   id="columnSeries"  filters="{[ new DropShadowFilter( 2, 45, fillColor_.color, 0.5,  2, 3 )]}"
				displayName="Expenses" fills="{[this.fillColor_]}"
				/>
		</mx:series>

	</mx:BarChart>
		<s:Line width="100%"  id="hrLine">
			<s:stroke>
				<s:SolidColorStroke color="0x2B2A28" />
			</s:stroke>
		</s:Line>
			
		</s:VGroup>		
		
		
		<s:VGroup  includeIn="pieChart" id="holderForPieChartAndhrLine" gap="-3" 
			  horizontalAlign="center" >
			<mx:PieChart id="myChart3" 
						 alpha.pieChart="1" alpha="0"   
						 filters="{[ new DropShadowFilter( 4, 45,0, 0.5,  2, 3 )]}"
					  width="{pieWidth}" height="{pieHeight}"
						 dataProvider="{expenses2}" 
						 showDataTips="true" 
						 >
				<mx:series>
					<mx:PieSeries  explodeRadius="0.08" id="pieSeries"
								    filters="[]"
						field="Amount"  color="{fontColor}"  fontSize="14"
						  labelField="Expense" fontFamily="ACaslonProRegularEmbedded2"
						nameField="Expense"  calloutStroke="{new SolidColorStroke(fontColor)}"
						labelPosition="inside" >
						<mx:showDataEffect>
							<mx:SeriesInterpolate duration="500" />
						</mx:showDataEffect>
					</mx:PieSeries>
				</mx:series>
			</mx:PieChart>
		</s:VGroup>		
		
		
		
		<s:VGroup  includeIn="lineChart" id="holderForLineChartAndhrLine" gap="-3" 
				   horizontalAlign="center" >
			<mx:LineChart id="myChart4" 
						  alpha.lineChart="1" alpha="0"    
						  alpha.pieChart="0"
						  paddingLeft="5" paddingRight="5"  
						  width="{pieWidth-55+20}" height="{pieHeight}"
						  showDataTips="true" dataProvider="{expensesAC}">
				<mx:backgroundElements>
					<mx:GridLines 
						horizontalChangeCount="1" 
						verticalChangeCount="1"
						 
						>
						<mx:horizontalStroke>
							<s:SolidColorStroke color="0xFFFFFF" alpha="0.0"  weight="1"/>
						</mx:horizontalStroke>
						<mx:verticalStroke>
							<mx:SolidColorStroke weight="1"/>
						</mx:verticalStroke>
				<!--		<mx:horizontalFill>
							<mx:SolidColor color="0x99033" alpha=".66"/>
						</mx:horizontalFill>-->
					</mx:GridLines>

				</mx:backgroundElements>
				<mx:horizontalAxis>
					<mx:CategoryAxis  id="a11s"   categoryField="Month"/>
				</mx:horizontalAxis>
				<mx:horizontalAxisRenderers>
					<mx:AxisRenderer   canDropLabels="true" labelGap="10"
									  axis="{a11s}" tickLength="0"    fontSize="16"
									  showLine="true"   >
						<mx:axisStroke>
							<mx:SolidColorStroke color="#FFFFFF" 
									   weight="1" 
									   alpha=".75"
									   />
						</mx:axisStroke>
					</mx:AxisRenderer>

				</mx:horizontalAxisRenderers>				
				<mx:verticalAxis>
					<mx:LinearAxis  id="a11"    padding="5" baseAtZero="false"    />
				</mx:verticalAxis>				
				<mx:verticalAxisRenderers>
					<mx:AxisRenderer   labelGap="10"
									   canDropLabels="true"    fontSize="14"
						axis="{a11}" tickLength="0"   
						showLine="false"
						/>
				</mx:verticalAxisRenderers>

				<mx:series>
					<mx:LineSeries yField="Profit" form="segment" displayName="Profit" lineStroke="{s1}"/>
					<mx:LineSeries yField="Expenses" form="segment" displayName="Expenses" lineStroke="{s2}"/>
					<mx:LineSeries yField="Amount" form="segment" displayName="Amount" lineStroke="{s3}"/>
				</mx:series>
			</mx:LineChart>
		</s:VGroup>		
<!--	<mx:LineChart height="80%"  width="100%" 
				  dataProvider="{expenses}"  >
			<mx:backgroundElements>
					<mx:GridLines styleName="myStyle">
						<mx:horizontalStroke>
							<mx:SolidColorStroke weight="3"/>
						</mx:horizontalStroke>
						<mx:verticalStroke>
							<mx:SolidColorStroke weight="3"/>
						</mx:verticalStroke>
					</mx:GridLines>
			</mx:backgroundElements>
			<mx:horizontalAxis>
				<mx:CategoryAxis 
					id="a1"   
					dataProvider="{expenses}" 
					categoryField="Month"
					/>
			</mx:horizontalAxis>
			<mx:horizontalAxisRenderers>
				<mx:AxisRenderer 
					axis="{a1}" styleName="myAxisStyle"
					showLine="false"/>
			</mx:horizontalAxisRenderers>
			<mx:verticalAxisRenderers>
				<mx:AxisRenderer 
					axis="{a1}" styleName="myAxisStyle"
					showLine="false"
					/>
			</mx:verticalAxisRenderers>
			<mx:series>
				<mx:LineSeries 
					yField="Profit" 
					displayName="Profit"
					/>
				 
			</mx:series>
		</mx:LineChart>-->

	<s:Label  id="lblBottom" text="Transcode"  maxDisplayedLines="1"   />
	</s:VGroup>
	
	
	<view:EditBorder id="editBorder" edit="{this}" />
</s:Group>
