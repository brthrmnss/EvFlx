<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 width="100%" height="100%"
		 fontSize="12"  color="0" clipAndEnableScrolling="false"
		  
		 xmlns:mx="library://ns.adobe.com/flex/mx"   initialize="group1_initializeHandler(event)"
		 creationComplete="onInit()" xmlns:view="org.syncon.evernote.panic.view.*"
		 xmlns:utils="org.syncon.evernote.panic.view.utils.*"
		 >
	<fx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			public var creationComplete : Boolean = false; 
			
			public var editMode : Boolean = false; 
			
			static public var CLICKED_REMOVE : String = 'clickedRemove2' 			
			static public var CLICKED_EDIT : String = 'clickedEdit2' 
			static public var CLICKED : String = 'clicked_' 				
			static public var CLICKED_UP : String = 'clickedUp2' 
			static public var CLICKED_DOWN : String = 'clickedDown2' 
			static public var SHOW : String = 'showEdit2' 
				
			protected function onInit():void
			{
				this.creationComplete = true
				this.hide()
				this.setupRollover();
				//put the bottom control in front 
				this.edit.addElement( this.foregroupdElements )
					
				this.fxFader_BorderHighlight.hide()
			}

			
			protected function btnRemove_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( CLICKED_REMOVE ) ) 
			}			
			protected function btnEdit_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( CLICKED_EDIT ) ) 
			}
			
			protected function btnUp_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( CLICKED_UP  ) ) 
			}
			
			protected function btnDown_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( CLICKED_DOWN  ) ) 
			}			

			public function show() : void
			{
				//return;
				this.fxFadeIn.show()
				this.fxFadeIn_Editor.show();
				//this.visible = true
				this.dispatchEvent( new CustomEvent( SHOW ) ) 
			}
			
			public function hide()  : void
			{
				this.fxFadeIn.hide()
				this.fxFadeIn_Editor.hide();	
				//this.visible = false 
			}

			protected function group1_initializeHandler(event:FlexEvent):void
			{
				this.hide()
				this.clickableShade.visible = false; 
				this.txtInstructions.visible = false; 
			}

			public var edit :  Group ; 

			protected function group2_clickHandler(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( CLICKED  ) ) 
				event.stopImmediatePropagation()
			}

			public function setupRollover() : void
			{
				//this.fxFader_BorderHighlight.hide()
				this.addEventListener(MouseEvent.ROLL_OVER, this.group1_rollOverHandler,  false, 0, true ) 
				this.addEventListener(MouseEvent.ROLL_OUT, this.group1_rollOutHandler,  false, 0, true ) 
				this.parent.addEventListener(MouseEvent.ROLL_OVER, this.group1_rollOverHandler,  false, 0, true ) 
				this.parent.addEventListener(MouseEvent.ROLL_OUT, this.group1_rollOutHandler,  false, 0, true ) 					
			}
			
			public function set highlightBordersOnRollover( b : Boolean )  : void
			{
				if ( b )
					trace( 'a')
				this._highlightBordersOnRollover = b
			}
			public function get highlightBordersOnRollover() : Boolean 
			{
				return this._highlightBordersOnRollover
			}
			
			public var _highlightBordersOnRollover : Boolean = false; 
			protected function group1_rollOutHandler(event:MouseEvent):void
			{
				
				var x : Object = this.fxFader_BorderHighlight._target
				this.fxFader_BorderHighlight.hide() 
			}
			
			
			protected function group1_rollOverHandler(event:MouseEvent):void
			{
				if ( this.highlightBordersOnRollover )
				this.fxFader_BorderHighlight.show() 
			}		
			

			protected function group3_clickHandler(event:MouseEvent):void
			{
				trace('group3_clickHandler')
			}


			protected function holderForEditing_clickHandler(event:MouseEvent):void
			{
				trace('holderForEditing_clickHandler')
			}

		]]>
	</fx:Script>
 	
	<utils:FadeInOutByFunction id="fxFadeIn"  visible="false"/>
	 
	<utils:FadeInOutByFunction id="fxFadeIn_Editor"  adjust="{this.foregroupdElements}" visible="false"/>
	<utils:FadeInOutByFunction id="fxFader_BorderHighlight" 
							    width="0" height="0"
							   adjust="{this.borderHighlight}" visible="false" />
 
	<s:Group right="0" left="0" top="0" bottom="0" id="bgItems" >
		<s:Group buttonMode="true" useHandCursor="true" 
				 id="borderHighlight" 
				 right="-5" left="-5" top="-5" bottom="-5"
				 alpha="0"
				 >
			<s:Rect   right="1" left="1" top="1" bottom="1"   >
				<s:stroke>
					<s:SolidColorStroke color="0xFF0000" weight="2" />
				</s:stroke>
			</s:Rect>
			
		</s:Group>
		 
		
		<!--right="-2" left="-2" top="-2" bottom="-2"   -->
		
		<s:Group buttonMode="false" useHandCursor="true" 
				 right="0" left="0" top="0" bottom="0" id="borderEdit" 
				  click="group3_clickHandler(event)">
			<s:Rect right="0" left="0" top="0" bottom="0"    >
				<s:stroke>
					<s:SolidColorStroke color="0x3B5E2B"  weight="1" />
				</s:stroke>
			</s:Rect>
			<!--
			<s:Rect id="borderEdit2" right="0" left="0" bottom="0"  height="40"   >
				<s:fill>
					<s:SolidColor color="0xFFFFFF" alpha="0.8" />
				</s:fill>
			</s:Rect>	
			-->
		</s:Group>
	</s:Group>
	<!-- occulding Compoennts -->
	<s:Group id="foregroupdElements"  right="0" left="0" top="0" bottom="0" >
	<s:Group id="clickableShade"  buttonMode="true" 
			 toolTip="Add Component here"
			 useHandCursor="true" width="100%" height="100%"  click="group2_clickHandler(event)">
		<s:Rect right="1" left="1" top="1" bottom="1"   
				>
			<s:fill>
				<s:SolidColor  id="bgColor" color="0" alpha="0.7" />
			</s:fill> 
			
			
		</s:Rect>
		<s:Label text="ADD HERE" 
				 color="0xFFFFFF" id="txtInstructions"
				 verticalCenter="0" horizontalCenter="0" fontSize="18"/>
	</s:Group>
	
	
	
	<s:Group  right="10" bottom="10"  id="holderForEditing"  click="holderForEditing_clickHandler(event)">
		
		<s:Rect id="borderEdit2" right="0" left="0" bottom="0"  top="0" 
				 	 >
			<s:fill>
				<s:SolidColor color="0xFFFFFF" alpha="0.8" />
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="0x666666"  pixelHinting="true"  weight="1"/>
			</s:stroke>
		</s:Rect>			
		<s:HGroup  verticalCenter="0" height="30"  
			paddingBottom="10" paddingLeft="10" paddingTop="10" paddingRight="10" 
				    verticalAlign="middle"
				  >
			<utils:IconButton  iconSkin=".btnUp"  id="btnUp"  toolTip="Move Up one Row"
							   click="btnUp_clickHandler(event)"/>
			<utils:IconButton  iconSkin=".btnDown"  id="btnDown"  toolTip="Move Down one Row"
							   click="btnDown_clickHandler(event)"/>
			<!--<utils:IconButton  iconSkin=".iconTrash"  id="btnRemove"  toolTip="Remove Row"
							   click="btnRemove_clickHandler(event)"/>-->
			<utils:IconButton  iconSkin=".closeBtn"  id="closeBtn"  toolTip="Remove Row"
							   click="btnRemove_clickHandler(event)"/>			
		</s:HGroup>
		<s:filters>
			<s:DropShadowFilter
				alpha="0.5" angle="45.0" blurX="4.0" blurY="4.0" color="0x000000" 
				distance="2" hideObject="false" inner="false" knockout="false" quality="2" 
				strength="1"/>
		</s:filters>
	</s:Group>
	
	
	</s:Group>
	
</s:Group>
