<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"   resize="itemrenderer1_resizeHandler(event)"
		  fontSize="24" height="42" width="100%" creationComplete="itemrenderer1_creationCompleteHandler(event)"
				autoDrawBackground="false" xmlns:view="org.syncon.evernote.panic.view.*" xmlns:utils="org.syncon.evernote.panic.view.utils.*">
	
	<fx:Script> 
		<![CDATA[ 
			import mx.collections.ArrayList;
			import mx.effects.Effect;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.vo.ProjectVO;
			
			import spark.effects.animation.RepeatBehavior;
			
			[Bindable] public var colorText :  uint = 0xFFFFFF; 
			[Bindable] public var bgVisible : Boolean = true;
			
			[Bindable] public var project :  ProjectVO = new ProjectVO()
			override public function set data(value:Object):void { 
				super.data = value; 
				if (value== null)  return; 
				if ( project != null ) 
					this.project.removeEventListener(ProjectVO.PROJECT_UPDATED, this.modifyRenderer )
				this.project = value as ProjectVO
				this.project.addEventListener(ProjectVO.PROJECT_UPDATED, this.modifyRenderer, false, 0, true ) 		
				
				this.modifyRenderer() 
			}
			
			private function modifyRenderer(e:CustomEvent=null) : void
			{
				if ( this.creationComplete == false  ) 
					return; 
				this.img.source =  project.img
				txtName.text = project.name.toString().toUpperCase(); 
				this.txtCol2.text = this.project.status.toString().toUpperCase()
				this.txtCol3.text = this.project.status2.toString().toUpperCase()	
				this.progressBar.value = this.project.progress
				if ( e	 != null )
				{
					var props : Array = e.data as Array
					if ( props.indexOf( 'name' ) != -1 ) 
						this.animateHover( this.groupName ) 
					if ( props.indexOf( 'img' ) != -1 ) 
						this.animateHover( this.groupImg ) 	
					if ( props.indexOf( 'people_ids' ) != -1 ) 
						this.animateHover( this.groupPeople ) 			
					if ( props.indexOf( 'status' ) != -1 ) 
						this.animateHover( this.groupStatus ) 	
					if ( props.indexOf( 'status2' ) != -1 ) 
						this.animateHover( this.groupStatus2 ) 							
				}
					var rotation_  : Number = Math.random()*3
					if ( Math.random() < 0.5 )
						rotation_ *= -1
				//this.txtCol2.rotation = rotation_
					
					  rotation_   = Math.random()*3
					if ( Math.random() < 0.5 )
						rotation_ *= -1				
				//this.memberLIst.rotation = Math.random()*5
				//txtName.toolTip = project.toolTip.toString();
				//lblVariable.text = project.name2.toString();
				this.memberLIst.list1.dataProvider = new ArrayList( this.project.ppl ) 
			} 
 
			public var creationComplete : Boolean = false; 
			protected function itemrenderer1_creationCompleteHandler(event:FlexEvent):void
			{
				this.creationComplete = true; 
				this.modifyRenderer()
				this.parentDocument.addEventListener( 'updateRenderers', this.updateRendererFromParent, false, 0, true ) 		
				this.updateRendererFromParent(null)
			}

			public function updateRendererFromParent(e:Event):void
			{
				this.bgVisible = this.parentDocument.parentDocument.bgVisible; 
				var colorText_ : uint = this.parentDocument.parentDocument.colorText as uint
				this.colorText = colorText_ 
			}
			
			
			private var animatingTargets:Object = new Object();
			
			public function animateHover(target:Object):void
			{
				if (animatingTargets[target.id] === undefined)
				{
					var effect:  Effect;                
					if (true)
						effect = rotator;
					else
						effect = mover;
					effect.target = target;
					animatingTargets[target.id] = effect;
					effect.play();
				}
			}
			private function effectEndHandler(event:  EffectEvent):void
			{
				delete animatingTargets[event.effectInstance.target.id];
			}			
			

			protected function itemrenderer1_resizeHandler(event:ResizeEvent):void
			{
				var width_  : Number = this.width  - 35 - 10*5
				this.groupName.width = width_ * .25
				this.memberLIst.width = this.groupPeople.width = width_ * .35		
				this.groupStatus.width = width_ * .20				
				this.groupStatus2.width = width_ * .20									
			}

		]]> 
	</fx:Script> 	
	<fx:Declarations> 
		<s:Rotate3D id="rotator" angleXFrom="0" angleXTo="360"
					autoCenterTransform="true" duration="500"
					effectEnd="effectEndHandler(event)"/>
		<s:Move3D id="mover" duration="200"
				  xBy="-30" repeatCount="2"
				  repeatBehavior="{RepeatBehavior.REVERSE}"
				  autoCenterTransform="true"  
				  effectEnd="effectEndHandler(event)"/>
	</fx:Declarations>
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
	</s:states> 	
	
	<s:transitions>
		<s:Transition toState="*" >
			<s:AnimateColor targets="{[this.txtName, this.txtCol2, this.txtCol3]}"   duration="250" />
		</s:Transition>
	</s:transitions>	
	
	<s:layout>
		<s:HorizontalLayout gap="10" horizontalAlign="left" />
	</s:layout>
	
	<s:Group  height="42" width="42" id="groupImg">
		<s:SkinnableContainer  right="0" top="0" left="0" bottom="0" visible="{this.bgVisible}"
				  skinClass="org.syncon.evernote.panic.view.skins.StatusBoardProjectBackground" >
		</s:SkinnableContainer>
		<utils:Avatar id="img"   emptySetting="" 
					  horizontalCenter="0" verticalCenter="0" />
		<s:SkinnableContainer right="0" top="0" left="0" bottom="0"  visible="{this.bgVisible}"
							   skinClass="org.syncon.evernote.panic.view.skins.StatusBoardProjectBackground_Middle" >
		</s:SkinnableContainer>		
	</s:Group>

	<s:Group width="160" height="42" id="groupName">
		<s:SkinnableContainer  right="0" top="0" left="0" bottom="0" visible="{this.bgVisible}"
			 skinClass="org.syncon.evernote.panic.view.skins.StatusBoardProjectBackground">
		</s:SkinnableContainer>
		<utils:ProgressBar id="progressBar"  alpha="0.5" width="100%" height="100%" />
		<s:Label   id="txtName" verticalCenter="0"
				   color.hovered="0x696969"  x="5"
				    width="100%"  maxDisplayedLines="1"
				   useHandCursor="true"  buttonMode="true"
				   color="{colorText}"  />		
		<s:SkinnableContainer right="0" top="0" left="0" bottom="0"  visible="{this.bgVisible}"
							  skinClass="org.syncon.evernote.panic.view.skins.StatusBoardProjectBackground_Middle" >
		</s:SkinnableContainer>			
	</s:Group>

	
	<s:Group  width="120"  height="42" id="groupStatus">
		<s:SkinnableContainer  right="0" top="0" left="0" bottom="0" visible="{this.bgVisible}"
				skinClass="org.syncon.evernote.panic.view.skins.StatusBoardProjectBackground">
		</s:SkinnableContainer>
		<s:Label   id="txtCol2" verticalCenter="0"
				   color.hovered="0x696969"  
				   paddingLeft="5" paddingRight="5"
				   useHandCursor="true"  buttonMode="true"
				   color="{colorText}"  />		
		<s:SkinnableContainer right="0" top="0" left="0" bottom="0"  visible="{this.bgVisible}"
							  skinClass="org.syncon.evernote.panic.view.skins.StatusBoardProjectBackground_Middle" >
		</s:SkinnableContainer>			
	</s:Group>

	
	<s:Group   height="42"  width="155" id="groupStatus2">
		<s:SkinnableContainer  right="0" top="0" left="0" bottom="0" visible="{this.bgVisible}"
					skinClass="org.syncon.evernote.panic.view.skins.StatusBoardProjectBackground">
		</s:SkinnableContainer>
		<s:Label   id="txtCol3" verticalCenter="0"
				   color.hovered="0x696969"  
				    paddingLeft="5" paddingRight="5"
				   useHandCursor="true"  buttonMode="true"
				   color="{colorText}"  />	
		<s:SkinnableContainer right="0" top="0" left="0" bottom="0"  visible="{this.bgVisible}"
							  skinClass="org.syncon.evernote.panic.view.skins.StatusBoardProjectBackground_Middle" >
		</s:SkinnableContainer>			
	</s:Group>

	
	<s:Group   height="42" width="235"  id="groupPeople">
		<s:SkinnableContainer  right="0" top="0" left="0" bottom="0" visible="{this.bgVisible}"
							   skinClass="org.syncon.evernote.panic.view.skins.StatusBoardProjectBackground">
		</s:SkinnableContainer>
		<s:SkinnableContainer right="0" top="0" left="0" bottom="0" alpha="1"  visible="{this.bgVisible}"
							  skinClass="org.syncon.evernote.panic.view.skins.StatusBoardProjectBackground_Middle" >
		</s:SkinnableContainer>		
		 <view:ProjectMembersList id="memberLIst"  verticalCenter="0"  width="235"/>
			
	</s:Group>
	
		

</s:ItemRenderer>
