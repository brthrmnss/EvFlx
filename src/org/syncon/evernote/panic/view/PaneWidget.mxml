<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		  clipAndEnableScrolling="true"
		 creationComplete="onInit()" resize="group1_resizeHandler(event)"
		 implements="org.syncon.evernote.panic.view.IUIWidget"
		 color="0xFFFFFF" xmlns:view="org.syncon.evernote.panic.view.*"
		 >
	
	<fx:Metadata>
		[Event(name="tagsChanged", type="org.syncon.evernote.basic.model.CustomEvent")]
	</fx:Metadata>		
	
	<fx:Script>
		<![CDATA[
			import mx.effects.Effect;
			import mx.events.EffectEvent;
			import mx.events.ResizeEvent;
			
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.controller.WidgetEvent;
			import org.syncon.evernote.panic.vo.WidgetVO;
			
			import spark.core.MaskType;
			import spark.effects.animation.RepeatBehavior;
			
			static public var TAGS_CHANGED : String = 'tagsChanged'				
			
			
			/**
			 * Flag indiates whether tags should be removed instantly 
			 * */
			public var creationComplete : Boolean = false; 
			
			public var _widgetData : WidgetVO = new WidgetVO
			public function set  widgetData ( w : WidgetVO )  : void { this._widgetData = w }
			public function get   widgetData (  )  : WidgetVO { return this._widgetData; }		
			
			protected function onInit():void
			{
				this.creationComplete = true
				//this.addEventListener(ResizeEvent.RESIZE, this.onResize ) 
			}				
			
			public function onResize(e : Event) : void
			{
				//if ( this.data.vo.height == NaN ) 
				this.height = this.width*(115/99) 				
			}
			
			override public function set  width ( w : Number )  : void
			{
				super.width = w; 
				this.height = w*(115/99) 
			}
			
			override public function set  percentWidth ( w : Number )  : void
			{
				super.percentWidth =  w;
				//this.height = this.width*(115/99) 
			}			
			/**
			 * Used by stuff placed on screen only
			 * */
			public function set colorScheme( i : int )  : void
			{
				if ( i == 0 ) 
				{
					this.color1.color = 0x4D4844
					this.color2.color = 0x0E0E0E
				}
				if ( i == 2 ) 
				{
					this.color1.color = 0x3D3F3C
					this.color2.color = 0x3D3F3C				
				}
			}
			public var text_ :  String = ''; 
			
			public function importConfig(j :   WidgetVO )  : void
			{
				this.widgetData = j
				this.dispatchEvent( new WidgetEvent(WidgetVO.IMPORT_CONFIG,  j ) )
			}
			
				public function refresh(temp  : WidgetVO= null) : void
				{
					var useSettings : WidgetVO = this.widgetData; 
					if ( temp != null ) 
						useSettings = temp; 
					this.dispatchEvent( new WidgetEvent( WidgetEvent.AUTOMATE_WIDGET,
						null, useSettings ) ) 
				}					
			
			public function importData_( o:   Object )  : void
			{
			}		
			static public function importData( name : String, desc:String, 
											   source : String='',    bgSource : String='', refreshTime :  Number=15000, 
												color1 : String = '', color2 : String = '', 
											   height : Number = NaN, customGradient : String = '', 
											   cornerRadius : int = 12)  :   PaneWidget
			{
				var o : Object = {}
				var vo : WidgetVO = new WidgetVO(WidgetVO.PANE, o); 	
				var g :  PaneWidget = new PaneWidget()
				g.widgetData = vo
				
				vo.name = name; 
				vo.description = desc
				vo.source = source; 
				vo.refreshTime = refreshTime; 
				vo.background = bgSource; 
				
				o.color1 = uint( color1 ) 
				o.color2 = uint( color2 ) 
				o.customGradient = customGradient
				o.cornerRadius = cornerRadius		
				return g ; 				
			}						
				
			public function exportConfig( ) : WidgetVO    
			{
				return this._widgetData; 
			}			
			

			protected function group1_resizeHandler(event:ResizeEvent):void
			{
				if ( this.percentWidth != 0 && ! isNaN( this.percentWidth  ) ) 
				{
				//if ( this.data.vo.height == NaN ) 
				
					var newHeight : Number = this.parentDocument.width*this.percentWidth/100*(115/99)
					newHeight = Math.min( 300, newHeight ) 
					this.height = newHeight
				}
			}
			
			public function showEdit() : void
			{
				this.editBorder.show()
			}
			
			public function hideEdit()  : void
			{
				this.editBorder.hide()
			}					

			
			private var animatingTargets:Object = new Object();
			
			public function animateHover(target:Object):void
			{
				if (animatingTargets[target.id] === undefined)
				{
					var effect: Effect;                
					if (true)
						effect = rotator;
					else
						effect = mover;
					effect.target = target;
					animatingTargets[target.id] = effect;
					effect.play();
				}
			}
			private function effectEndHandler(event: EffectEvent):void
			{
				delete animatingTargets[event.effectInstance.target.id];
			}			
			
			[Bindable] public var cornerRadius : int = 12 
		]]>
	</fx:Script>
	<fx:Declarations> 
		<s:Rotate3D id="rotator" angleYFrom="0" angleYTo="360"
					autoCenterTransform="true"
					effectEnd="effectEndHandler(event)"/>
		<s:Move3D id="mover" duration="200"
				  zBy="-30" repeatCount="2"
				  repeatBehavior="{RepeatBehavior.REVERSE}"
				  autoCenterTransform="true"
				  effectEnd="effectEndHandler(event)"/>
	</fx:Declarations>

	<s:Rect  radiusX="{this.cornerRadius}" radiusY="{this.cornerRadius}" 
			 top="0" right="0" bottom="0" left="0">
		<s:fill>
			<s:LinearGradient  rotation="90" id="gradientBg">
				<s:GradientEntry  id="color1" color="0x3E4B5C" ratio="0.2"/>
				<s:GradientEntry   id="color2" color="0x051931" ratio="1"/>
			</s:LinearGradient>
		</s:fill>
	</s:Rect>
	<s:Rect  id="bgCustomGradient" visible="false" radiusX="{this.cornerRadius}" radiusY="{this.cornerRadius}" 
			 top="0" right="0" bottom="0" left="0">
		<s:fill>
			<s:LinearGradient  rotation="90" id="gradientBg2">
				<s:GradientEntry   color="0x051931" ratio="0"/>
				<s:GradientEntry  color="0x3E4B5C" ratio="0.2"/>
				<s:GradientEntry  color="0x051931" ratio="1"/>
				
			</s:LinearGradient>
		</s:fill>
	</s:Rect>

<!--	
	<s:Rect  radiusX="12" radiusY="12"  top="2" right="2" bottom="2" left="2">
		<s:stroke>
			<s:SolidColorStroke color="{this.color2.color}" />
		</s:stroke>
	</s:Rect>
		
	-->
	<!--<s:VGroup horizontalCenter="0" verticalCenter="0">
		<s:Label text="89/3" />
		<s:Label text="Transcode"  />
	</s:VGroup>-->
	<s:RichText width="100%"   id="txtBg" 
				mask="{this.bgMask}" maskType="{MaskType.ALPHA}"
				fontLookup="embeddedCFF" fontSize="13" renderingMode="cff"
				paddingBottom="0" paddingLeft="0"  fontFamily="ACaslonProRegularEmbedded"
				paddingTop="0" paddingRight="0" 
				/>	
	<s:RichText width="100%"  id="txt" 
				mask="{this.bgMask2}"  maskType="{MaskType.ALPHA}"
				fontLookup="embeddedCFF" fontSize="13" renderingMode="cff"
				paddingBottom="0" paddingLeft="0"  fontFamily="ACaslonProRegularEmbedded"
				paddingTop="0" paddingRight="0" 
			
				/>
	<!--backgroundColor="0xFF0000"-->
	<s:Group  id="bgMask" top="0" right="0" bottom="0" left="0" >
		<s:Rect visible="true" radiusX="{this.cornerRadius}" radiusY="{this.cornerRadius}" 
				top="0" right="0" bottom="0" left="0">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>	
	</s:Group>
	<s:Group  id="bgMask2"  top="0" right="0" bottom="0" left="0"  >
		<s:Rect visible="true" radiusX="{this.cornerRadius}" radiusY="{this.cornerRadius}" 
				top="0" right="0" bottom="0" left="0">
			<s:fill>
				<s:SolidColor color="0xFFFFFF" />
			</s:fill>
		</s:Rect>	
	</s:Group>
	
	
	<view:EditBorder id="editBorder" edit="{this}" />
</s:Group>
