<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"  
		 creationComplete="onInit()"
		 implements="org.syncon.evernote.panic.view.IUIWidget"
		 color="0xFFFFFF" fontSize="34" xmlns:view="org.syncon.evernote.panic.view.*"
		 >
	
	<fx:Metadata>
		[Event(name="tagsChanged", type="org.syncon.evernote.basic.model.CustomEvent")]
	</fx:Metadata>		
	
	<fx:Script>
		<![CDATA[
			import org.syncon.evernote.basic.model.CustomEvent;
			import org.syncon.evernote.panic.controller.WidgetEvent;
			import org.syncon.evernote.panic.vo.WidgetVO;
			static public var TAGS_CHANGED : String = 'tagsChanged'				
			
			/**
			 * Flag indiates whether tags should be removed instantly 
			 * */
			public var creationComplete : Boolean = false; 
			
			private var _widgetData : WidgetVO = new WidgetVO
			public function set  widgetData ( w : WidgetVO )  : void { this._widgetData = w }
			public function get   widgetData (  )  : WidgetVO { return this._widgetData; }	
			
			[Bindable] private var state1Text : String = '';
			[Bindable] private var state2Text : String = ''; 	
			
			public function set  message ( s : String ) : void
			{
				//this.lblMessage.text = s.toUpperCase() ; 
				if ( this.currentState == 'State1' ) 
				{
					this.state2Text = s
					this.currentState = 'State2'					
				}
				else
				{
					this.state1Text = s					
					this.currentState = 'State1'
				}
			}
			
			protected function onInit():void
			{
				this.creationComplete = true
			}				
 
			public function refresh(temp  : WidgetVO= null) : void
			{
				var useSettings : WidgetVO = this.widgetData; 
				if ( temp != null ) 
					useSettings = temp; 
				this.dispatchEvent( new WidgetEvent( WidgetEvent.AUTOMATE_WIDGET,
					null, useSettings ) ) 
			}			
			
			public function importConfig(j :  WidgetVO )  : void
			{
				if ( j.data == null ) 
					return;
				this.widgetData = j
				this.widgetData.ui = this; 
				this.dispatchEvent( new WidgetEvent(WidgetEvent.IMPORT_CONFIG,  j ) )
				this.refresh()
			}
			public function importData_( o:   Object )  : void
			{
			}		
			static public function importData( name : String, desc:String,  
											  source : String='',   refreshTime :  Number=15000)  :   MessageWidget
			{
				var o : Object = {}
				var vo : WidgetVO = new WidgetVO(WidgetVO.MESSAGE, o); 	
				var g : MessageWidget = new MessageWidget()
				g.widgetData = vo
					
				vo.name = name; 
				vo.description = desc
				vo.source = source; 
				vo.refreshTime = refreshTime; 
				
				return g ; 
			}						
			
			public function exportConfig( ) : WidgetVO    
			{
				return this._widgetData; 
			}			
			
			public function showEdit() : void
			{
				this.editBorder.show()
			}
			
			public function hideEdit()  : void
			{
				this.editBorder.hide()
			}					
		]]>
	</fx:Script>
	
	<s:transitions>
		<s:Transition>
			<s:AnimateTransitionShader target="{ticker}" duration="1100"
				shaderByteCode="@Embed(source='org/syncon/evernote/panic/view/utils/HexCells.pbj',
									   mimeType='application/octet-stream')"/>
		</s:Transition>
	</s:transitions>	 
	
	<s:states>
		<s:State name="State1"/>
		<s:State name="State2"/>
	</s:states>
	
	<s:VGroup  id="ticker" horizontalCenter="0" verticalCenter="0">
		<s:Label  id="lblMessage"
				  text.State1="{state1Text}" text.State2="{this.state2Text}"
				  text="25 DAS UNTIL IPAD LAUNCH"   />
	</s:VGroup>
	
	<view:EditBorder id="editBorder" edit="{this}" />
	
</s:Group>
